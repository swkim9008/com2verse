// GENERATED BY UNITY. REMOVE THIS COMMENT TO PREVENT OVERWRITING WHEN EXPORTING AGAIN
// GENERATED BY HIVE. DON'T REMOVE THIS COMMENT FOR HIVE SETUP
import org.gradle.util.GradleVersion	
//'import GradleVersion' is needed UNITY 2018 4.4 or latest version.

buildscript {
	ext.kotlin_version = '1.5.20'
	repositories {
		if (GradleVersion.current() >= GradleVersion.version("4.2")) {
			google()
		} else {
			maven {
				url 'https://maven.google.com/'
				name 'Google'
			}
		}
		mavenCentral()
	}

	dependencies {
		// use newer version of the plugin for newer unity/gradle versions
		// table from https://developer.android.com/studio/releases/gradle-plugin#updating-gradle
		if (GradleVersion.current() >= GradleVersion.version("7.4")) {
			classpath 'com.android.tools.build:gradle:7.3.1'
			classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
		} else if (GradleVersion.current() >= GradleVersion.version("7.3.3")) {
			classpath 'com.android.tools.build:gradle:7.2.2'
			classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.10"
		} else if (GradleVersion.current() >= GradleVersion.version("7.2")) {
			classpath 'com.android.tools.build:gradle:7.1.3'
			classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.10"
		} else if (GradleVersion.current() >= GradleVersion.version("7.0.2")) {
			classpath 'com.android.tools.build:gradle:7.0.4'
			classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.10"
		} else if (GradleVersion.current() >= GradleVersion.version("6.7.1")) {
			classpath 'com.android.tools.build:gradle:4.2.0'
			classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.4.32"
		} else if (GradleVersion.current() >= GradleVersion.version("6.5")) {
			classpath 'com.android.tools.build:gradle:4.1.0'
			classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.4.32"
		} else if (GradleVersion.current() >= GradleVersion.version("6.1.1")) {
			classpath 'com.android.tools.build:gradle:4.0.0'
			classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.4.32"
		} else if (GradleVersion.current() >= GradleVersion.version("5.6.4")) {
			classpath 'com.android.tools.build:gradle:3.6.4'
			classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.4.32"
		} else if (GradleVersion.current() >= GradleVersion.version("5.4.1")) {
			classpath 'com.android.tools.build:gradle:3.5.4'
			classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.4.32"
		} else if (GradleVersion.current() >= GradleVersion.version("5.1.1")) {
			classpath 'com.android.tools.build:gradle:3.4.3'
			classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.4.32"
		} else if (GradleVersion.current() >= GradleVersion.version("4.10.1")) {
			classpath 'com.android.tools.build:gradle:3.3.3'
			classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.4.32"
		} else if (GradleVersion.current() >= GradleVersion.version("4.6")) {
			classpath 'com.android.tools.build:gradle:3.2.1'
			classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.4.32"
		} else if (GradleVersion.current() >= GradleVersion.version("4.4")) {
			classpath 'com.android.tools.build:gradle:3.1.0'
			classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.4.32"
		} else if (GradleVersion.current() >= GradleVersion.version("4.1")) {
			classpath 'com.android.tools.build:gradle:3.0.1'
			classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.4.32"
		} else if (GradleVersion.current() >= GradleVersion.version("3.3")) {
			classpath 'com.android.tools.build:gradle:2.3.3'
			classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.4.32"
		} else {
			// Does not support 
		}
	}
}

allprojects {
	repositories {
		flatDir {
			dirs 'libs'
		}
		if (GradleVersion.current() >= GradleVersion.version("4.2")) {
			google()
		} else {
			maven {
				url 'https://maven.google.com/'
				name 'Google'
			}
		}
		mavenCentral()
	}
}

([rootProject] + (rootProject.subprojects as List)).each {
	ext {
		it.setProperty("android.useAndroidX", true)
		it.setProperty("android.enableJetifier", true)
	}
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
**APPLY_PLUGINS**

dependencies {
	if (GradleVersion.current() >= GradleVersion.version("4.2")) {
		implementation 'androidx.multidex:multidex:2.0.1'
		implementation fileTree(dir: 'libs', include: ['*.jar'])
	} else {
		compile 'androidx.multidex:multidex:2.0.1'
		compile fileTree(dir: 'libs', include: ['*.jar'])
	}
	**DEPS**
}

android {
	compileSdkVersion **APIVERSION**
	buildToolsVersion '**BUILDTOOLS**'

	if (GradleVersion.current() < GradleVersion.version("4.2")) {
		// fix complaint that 3rd party libraries (ours!) have the same package name
		enforceUniquePackageName false
	}

	defaultConfig {
		minSdkVersion **MINSDKVERSION**
		targetSdkVersion **TARGETSDKVERSION**
		versionCode **VERSIONCODE**
		versionName '**VERSIONNAME**'

		consumerProguardFiles 'proguard-unity.txt'**USER_PROGUARD**

        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true // Android 5.0(API level 21 이하, VectorDrawable 지원)

		compileOptions {
			sourceCompatibility JavaVersion.VERSION_1_8
			targetCompatibility JavaVersion.VERSION_1_8
		}
	}

	packagingOptions {
		exclude 'META-INF/DEPENDENCIES'
		exclude 'META-INF/NOTICE'
		exclude 'META-INF/LICENSE'
		exclude 'META-INF/LICENSE.txt'
		exclude 'META-INF/NOTICE.txt'
	}

	dexOptions {
		javaMaxHeapSize "4g"
	}

	lintOptions {
		abortOnError false
	}

	kotlinOptions.useIR = true

	aaptOptions {
		// only Under Unity 2020
noCompress = ['.ress', '.resource', '.obb'] + unityStreamingAssets.tokenize(', ')
        ignoreAssetsPattern = "!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~"
	}

**SIGN**

	buildTypes {
		debug {
			minifyEnabled false
			if (GradleVersion.current() >= GradleVersion.version("4.2")) {
            }
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-unity.txt'**USER_PROGUARD**
			jniDebuggable true
			**SIGNCONFIG**
		}
		release {
			minifyEnabled false
			if (GradleVersion.current() >= GradleVersion.version("4.2")) {
            }
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-unity.txt'**USER_PROGUARD**
			**SIGNCONFIG**
		}
	}

}
**REPOSITORIES**
**IL_CPP_BUILD_SETUP**
**SOURCE_BUILD_SETUP**
**EXTERNAL_SOURCES**
