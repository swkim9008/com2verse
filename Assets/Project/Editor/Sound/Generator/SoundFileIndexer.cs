/*===============================================================
* Product:    Com2Verse
* File Name:  SoundFileIndexer.cs
* Developer:  yangsehoon
* Date:       2022-04-11 17:02
* History:    
* Documents:  Sound enum auto generator
* Copyright â“’ Com2us. All rights reserved.
 ================================================================*/

#if UNITY_EDITOR
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using Com2Verse.SoundSystem;
using UnityEditor;
using UnityEngine;

namespace Com2VerseEditor.SoundSystem
{
    public class SoundFileIndexer
    {
        private static string ConvertPascalToSnake(string pascal)
        {
            string escaped = Regex.Replace(pascal, @"\s+", "");
            StringBuilder sb = new StringBuilder();
            bool lastCapital = char.IsUpper(escaped[0]);

            foreach (char character in escaped)
            {
                bool currentlyCapital = char.IsUpper(character);
                if (char.IsLetter(character) || char.IsDigit(character))
                {
                    if (!lastCapital && currentlyCapital)
                    {
                        sb.Append("_");
                    }

                    sb.Append(character);
                }
                else
                {
                    sb.Append("_");
                }

                lastCapital = currentlyCapital;
            }

            return sb.ToString().ToUpper();
        }

        public static bool MakeEnum()
        {
            List<int> indexIncluded = new List<int>();
            StringBuilder str = new StringBuilder();

            str.AppendLine("// This file was generated by SoundFileIndexer");
            str.AppendLine("namespace Com2Verse.SoundSystem");
            str.AppendLine("{");
            str.Append("\t"); str.AppendLine("public enum eSoundIndex");
            str.Append("\t"); str.AppendLine("{");
            str.Append("\t\t"); str.AppendLine("NONE = 0,");
            var data = SoundManagerSetting.instance.ScriptTargetClips;
            foreach (var reference in data)
            {
                int targetIndex = reference.Index;
                if (targetIndex <= 0)
                {
                    Debug.LogError("Index must be greater than 0");
                    return false;
                }

                if (indexIncluded.Contains(targetIndex))
                {
                    Debug.LogError($"Duplicated Index {targetIndex}");
                    return false;
                }

                indexIncluded.Add(reference.Index);
                str.AppendLine($"\t\t{ConvertPascalToSnake(reference.Reference.editorAsset.name)} = {targetIndex},");
            }

            str.Append("\t"); str.AppendLine("}");
            str.AppendLine("}");

            File.WriteAllText(SoundManagerSetting.instance.SoundIndexFileName, str.ToString());
            AssetDatabase.ImportAsset(SoundManagerSetting.instance.SoundIndexFileName);

            return true;
        }

        public static bool UpdateDictionary()
        {
            StringBuilder str = new StringBuilder();

            str.AppendLine("// This file was generated by SoundFileIndexer");
            str.AppendLine("using System.Collections.Generic;");
            str.AppendLine("namespace Com2Verse.SoundSystem");
            str.AppendLine("{");
            str.AppendLine("\tpublic sealed partial class SoundManagerSetting");
            str.AppendLine("\t{");
            str.AppendLine("\t\tprivate static readonly Dictionary<int, string> _scriptTargetClips = new Dictionary<int, string>()");
            str.AppendLine("\t\t{");
            var data = SoundManagerSetting.instance.ScriptTargetClips;
            foreach (var reference in data)
            {
                if (reference.Index <= 0)
                {
                    Debug.LogError("Index must be greater than 0");
                    return false;
                }
                
                str.AppendLine($"\t\t\t{{{reference.Index}, \"{reference.Reference.AssetGUID}\"}},");
            }

            str.AppendLine("\t\t};");
            str.AppendLine("\t}");
            str.AppendLine("}");

            File.WriteAllText(SoundManagerSetting.instance.SoundManagerDictionaryFileName, str.ToString());
            AssetDatabase.ImportAsset(SoundManagerSetting.instance.SoundManagerDictionaryFileName);

            return true;
        }
    }
}
#endif
