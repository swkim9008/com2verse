//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Com2Verse.HttpHelper;
using Cysharp.Threading.Tasks;
using JetBrains.Annotations;
using Newtonsoft.Json;
using System;


namespace Com2Verse.WebApi.Service
{
    
    
    // 서비스 API 목록 (Test)
    public class Api
    {
        
        private static string _apiUrl = "https://devrke.com2verse.com:31995/messenger";
        
        private const string _apiUrlFormat = "{0}/{1}";
        
        public static string ApiUrl
        {
            get
            {
                return _apiUrl;
            }
            set
            {
                _apiUrl = value;
            }
        }
        
        public class Common
        {
            
            /// <summary>
            /// POST
            /// 로그인(콘솔)
            /// /api/Common/LoginConsole
            /// </summary>
            public static async UniTask<ResponseBase<Components.LoginConsoleResponseResponseFormat>> PostCommonLoginConsole(System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Common/LoginConsole";
                var response = await Client.POST.RequestAsync<Components.LoginConsoleResponseResponseFormat>(url, string.Empty, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 로그인(메신저, 유니티)
            /// /api/Common/LoginShareOffice
            /// </summary>
            public static async UniTask<ResponseBase<Components.LoginShareOfficeResponseResponseFormat>> PostCommonLoginShareOffice(Components.LoginShareOfficeRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Common/LoginShareOffice";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.LoginShareOfficeResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// TeamID Or SpaceID 로 해당 팀(공간)의 정보 얻기(Description 참고)
            /// /api/Common/GetInfoByTeamAttribute
            /// </summary>
            public static async UniTask<ResponseBase<Components.GetInfoByTeamAttributeResponseResponseFormat>> PostCommonGetInfoByTeamAttribute(Components.GetInfoByTeamAttributeRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Common/GetInfoByTeamAttribute";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.GetInfoByTeamAttributeResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 딥링크용 parameter 얻기
            /// /api/Common/DeeplinkParamGet
            /// </summary>
            public static async UniTask<ResponseBase<Components.DeeplinkParamGetResponseResponseFormat>> PostCommonDeeplinkParamGet(Components.DeeplinkParamGetRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Common/DeeplinkParamGet";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.DeeplinkParamGetResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 딥링크용 parameter parsing
            /// /api/Common/DeeplinkParamParse
            /// </summary>
            public static async UniTask<ResponseBase<Components.DeeplinkParamParseResponseResponseFormat>> PostCommonDeeplinkParamParse(Components.DeeplinkParamParseRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Common/DeeplinkParamParse";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.DeeplinkParamParseResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
        }
        
        public class ConsoleBaseEnvironment
        {
            
            /// <summary>
            /// POST
            /// 그룹 정보 조회
            /// /api/ConsoleBaseEnvironment/GroupInfoSelect
            /// </summary>
            public static async UniTask<ResponseBase<Components.OrganizationGroupInfoResponseResponseFormat>> PostConsoleBaseEnvironmentGroupInfoSelect(Components.OrganizationGroupInfoRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/ConsoleBaseEnvironment/GroupInfoSelect";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.OrganizationGroupInfoResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 그룹 정보 수정
            /// /api/ConsoleBaseEnvironment/EditGroupInfoSelect
            /// </summary>
            public static async UniTask<ResponseBase<Components.StringResponseFormat>> PostConsoleBaseEnvironmentEditGroupInfoSelect(Components.EditGroupInfoRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/ConsoleBaseEnvironment/EditGroupInfoSelect";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.StringResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 서비스 탈퇴
            /// /api/ConsoleBaseEnvironment/WithdrawalService
            /// </summary>
            public static async UniTask<ResponseBase<Components.StringResponseFormat>> PostConsoleBaseEnvironmentWithdrawalService(Components.WithdrawalServiceRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/ConsoleBaseEnvironment/WithdrawalService";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.StringResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 프로필 정보 세팅
            /// /api/ConsoleBaseEnvironment/SetGroupProfile
            /// </summary>
            public static async UniTask<ResponseBase<Components.StringResponseFormat>> PostConsoleBaseEnvironmentSetGroupProfile(Components.SetGroupConfigurationRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/ConsoleBaseEnvironment/SetGroupProfile";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.StringResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 그룹 별 설정값 (configuration) 가져오기
            /// /api/ConsoleBaseEnvironment/GetConfiguration
            /// </summary>
            /// <param name="groupId">long</param>
            public static async UniTask<ResponseBase<Components.BoConfigurationEntityIEnumerableResponseFormat>> PostConsoleBaseEnvironmentGetConfiguration(long groupId, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/ConsoleBaseEnvironment/GetConfiguration";
                var response = await Client.POST.RequestAsync<Components.BoConfigurationEntityIEnumerableResponseFormat>(url, string.Empty, cts, option);
                return response;
            }
        }
        
        public class ConsoleMain
        {
            
            /// <summary>
            /// POST
            /// 활성화된 공간 정보
            /// /api/ConsoleMain/GetActivatedSpaceInfo
            /// </summary>
            public static async UniTask<ResponseBase<Components.SpaceActivatedSpaceEntityIEnumerableResponseFormat>> PostConsoleMainGetActivatedSpaceInfo(Components.GetActivatedSpaceInfoRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/ConsoleMain/GetActivatedSpaceInfo";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.SpaceActivatedSpaceEntityIEnumerableResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 관리자 내 정보 보기
            /// /api/ConsoleMain/ManagerMyInfo
            /// </summary>
            public static async UniTask<ResponseBase<Components.ManagerMyInfoEntityResponseFormat>> PostConsoleMainManagerMyInfo(Components.ManagerMyInfoRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/ConsoleMain/ManagerMyInfo";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.ManagerMyInfoEntityResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 멤버 등록/미등록 카운트 조회
            /// /api/ConsoleMain/TeamMemberSelect
            /// </summary>
            public static async UniTask<ResponseBase<Components.TeamTotalMemberCountSelectResponseResponseFormat>> PostConsoleMainTeamMemberSelect(Components.TeamTotalMemberCountSelectRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/ConsoleMain/TeamMemberSelect";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.TeamTotalMemberCountSelectResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 그룹의 파일 사용량 조회
            /// /api/ConsoleMain/GetFileStorageUsage
            /// </summary>
            /// <param name="groupId">long</param>
            public static async UniTask<ResponseBase<Components.CustomerFileUsageResponseFormat>> PostConsoleMainGetFileStorageUsage(long groupId, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/ConsoleMain/GetFileStorageUsage";
                var response = await Client.POST.RequestAsync<Components.CustomerFileUsageResponseFormat>(url, string.Empty, cts, option);
                return response;
            }
        }
        
        public class ConsoleMember
        {
            
            /// <summary>
            /// POST
            /// 관리자가 멤버 등록 (인증전)
            /// /api/ConsoleMember/RegisterUnsignedMember
            /// </summary>
            public static async UniTask<ResponseBase<Components.RegisterUnsignedMemberResponseResponseFormat>> PostConsoleMemberRegisterUnsignedMember(Components.RegisterUnsignedMemberRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/ConsoleMember/RegisterUnsignedMember";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.RegisterUnsignedMemberResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 멤버 인증
            /// /api/ConsoleMember/RegisterMember
            /// </summary>
            public static async UniTask<ResponseBase<Components.StringResponseFormat>> PostConsoleMemberRegisterMember(Components.RegisterMemberRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/ConsoleMember/RegisterMember";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.StringResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 그룹의 팀 멤버 상세 조회
            /// /api/ConsoleMember/GetGroupTeamMember
            /// </summary>
            public static async UniTask<ResponseBase<Components.MemberEntityIEnumerableResponseFormat>> PostConsoleMemberGetGroupTeamMember(Components.GetGroupTeamMemberRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/ConsoleMember/GetGroupTeamMember";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.MemberEntityIEnumerableResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 멤버 관리 페이지(페이지네이션)
            /// /api/ConsoleMember/GetMemberManagePage
            /// </summary>
            public static async UniTask<ResponseBase<Components.MemberListResponseResponseFormat>> PostConsoleMemberGetMemberManagePage(Components.MemberListPageRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/ConsoleMember/GetMemberManagePage";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.MemberListResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 멤버 정보 수정
            /// /api/ConsoleMember/UpdateGroupMemberInfo
            /// </summary>
            public static async UniTask<ResponseBase<Components.StringResponseFormat>> PostConsoleMemberUpdateGroupMemberInfo(Components.UpdateMemberRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/ConsoleMember/UpdateGroupMemberInfo";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.StringResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 그룹에 속한 팀 목록 가져오기
            /// /api/ConsoleMember/GetTeamSummaryByGroup
            /// </summary>
            /// <param name="groupId">long</param>
            public static async UniTask<ResponseBase<Components.TeamSummaryInfoResponseIEnumerableResponseFormat>> PostConsoleMemberGetTeamSummaryByGroup(long groupId, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/ConsoleMember/GetTeamSummaryByGroup";
                var response = await Client.POST.RequestAsync<Components.TeamSummaryInfoResponseIEnumerableResponseFormat>(url, string.Empty, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 체크박스 표시된 유저 전체 삭제
            /// /api/ConsoleMember/DeleteCheckboxMembers
            /// </summary>
            public static async UniTask<ResponseBase<Components.StringListResponseFormat>> PostConsoleMemberDeleteCheckboxMembers(Components.DeleteCheckboxMembersRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/ConsoleMember/DeleteCheckboxMembers";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.StringListResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 프로필 사진 업로드 **주의 프로필 사진 업로드 일때만 이거 콜 해야함 !**
            /// /api/ConsoleMember/UploadProfileImage
            /// </summary>
            /// <param name="groupId">long</param>
            public static async UniTask<ResponseBase<Components.FileDownloadResponseResponseFormat>> PostConsoleMemberUploadProfileImage(long groupId, object requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/ConsoleMember/UploadProfileImage";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(requestBody.ToString());
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.FileDownloadResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 프로필 사진 업로드 도르마무!**
            /// /api/ConsoleMember/RollbackRegisterProfileImage
            /// </summary>
            public static async UniTask<ResponseBase<Components.StringResponseFormat>> PostConsoleMemberRollbackRegisterProfileImage(Components.ProfileImageRollbackRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/ConsoleMember/RollbackRegisterProfileImage";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.StringResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// SendCompleteRegisterEmail
            /// /api/ConsoleMember/SendRegisterEmail
            /// </summary>
            public static async UniTask<ResponseBase<Components.JsonObjectResponseFormat>> PostConsoleMemberSendRegisterEmail(Components.EmailSenderForm requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/ConsoleMember/SendRegisterEmail";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.JsonObjectResponseFormat>(builder.Request, cts, option);
                return response;
            }
        }
        
        public class ConsoleOrganizationChart
        {
            
            /// <summary>
            /// POST
            /// 조직도
            /// /api/ConsoleOrganizationChart/OrganizationChart
            /// </summary>
            public static async UniTask<ResponseBase<Components.OrganizationChartResponseResponseFormat>> PostConsoleOrganizationChartOrganizationChart(Components.OrganizationChartRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/ConsoleOrganizationChart/OrganizationChart";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.OrganizationChartResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// identifyKey를 입력받아 조직원 상세 조회
            /// /api/ConsoleOrganizationChart/GetMemberInfoByIdentifyKey
            /// </summary>
            public static async UniTask<ResponseBase<Components.MemberEntityResponseFormat>> PostConsoleOrganizationChartGetMemberInfoByIdentifyKey(Components.GetMemberInfoByIdentifyKeyRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/ConsoleOrganizationChart/GetMemberInfoByIdentifyKey";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.MemberEntityResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 팀 수정
            /// /api/ConsoleOrganizationChart/UpdateTeam
            /// </summary>
            public static async UniTask<ResponseBase<Components.StringResponseFormat>> PostConsoleOrganizationChartUpdateTeam(Components.UpdateTeamRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/ConsoleOrganizationChart/UpdateTeam";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.StringResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 팀명 수정
            /// /api/ConsoleOrganizationChart/UpdateTeamdName
            /// </summary>
            public static async UniTask<ResponseBase<Components.StringResponseFormat>> PostConsoleOrganizationChartUpdateTeamdName(Components.UpdateTeamNameRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/ConsoleOrganizationChart/UpdateTeamdName";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.StringResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 멤버 팀 수정(멤버 이동)
            /// /api/ConsoleOrganizationChart/UpdateMemberTeam
            /// </summary>
            public static async UniTask<ResponseBase<Components.StringResponseFormat>> PostConsoleOrganizationChartUpdateMemberTeam(Components.UpdateMemberTeamRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/ConsoleOrganizationChart/UpdateMemberTeam";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.StringResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 팀 삭제
            /// /api/ConsoleOrganizationChart/DeleteTeam
            /// </summary>
            public static async UniTask<ResponseBase<Components.StringResponseFormat>> PostConsoleOrganizationChartDeleteTeam(Components.DeleteTeamRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/ConsoleOrganizationChart/DeleteTeam";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.StringResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 그룹의 팀 id 로 이름이 부분 일치되는 멤버들 검색. 비어있을 경우 전체.
            /// /api/ConsoleOrganizationChart/GetGroupTeamMemberByName
            /// </summary>
            public static async UniTask<ResponseBase<Components.MemberEntityIEnumerableResponseFormat>> PostConsoleOrganizationChartGetGroupTeamMemberByName(Components.GetGroupTeamMemberRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/ConsoleOrganizationChart/GetGroupTeamMemberByName";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.MemberEntityIEnumerableResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 사전 예약된 그룹명 조회
            /// /api/ConsoleOrganizationChart/GetEventGroupName
            /// </summary>
            public static async UniTask<ResponseBase<Components.GetEventGroupNameResponseResponseFormat>> PostConsoleOrganizationChartGetEventGroupName(Components.GetEventGroupNameRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/ConsoleOrganizationChart/GetEventGroupName";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.GetEventGroupNameResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 팀 단위 조직도 보기 (테스트 용)
            /// /api/ConsoleOrganizationChart/TestTo
            /// </summary>
            /// <param name="groupId">long</param>
            /// <param name="teamId">long</param>
            public static async UniTask<ResponseBase<Components.TeamListResponseFormat>> PostConsoleOrganizationChartTestTo(long groupId, long teamId, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/ConsoleOrganizationChart/TestTo";
                var response = await Client.POST.RequestAsync<Components.TeamListResponseFormat>(url, string.Empty, cts, option);
                return response;
            }
        }
        
        public class ConsoleOrganizationCreate
        {
            
            /// <summary>
            /// POST
            /// 그룹 생성(Default:하나의 팀 생성, 멤버 생성)
            /// /api/ConsoleOrganizationCreate/GroupCreate
            /// </summary>
            public static async UniTask<ResponseBase<Components.GroupCreateResponseResponseFormat>> PostConsoleOrganizationCreateGroupCreate(Components.GroupCreateRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/ConsoleOrganizationCreate/GroupCreate";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.GroupCreateResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 팀 생성
            /// /api/ConsoleOrganizationCreate/CreateTeam
            /// </summary>
            public static async UniTask<ResponseBase<Components.CreateTeamResponseResponseFormat>> PostConsoleOrganizationCreateCreateTeam(Components.CreateTeamRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/ConsoleOrganizationCreate/CreateTeam";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.CreateTeamResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 팀의 공간 생성
            /// /api/ConsoleOrganizationCreate/CreateTeamSpace
            /// </summary>
            public static async UniTask<ResponseBase<Components.StringResponseFormat>> PostConsoleOrganizationCreateCreateTeamSpace(Components.CreateTeamSpaceRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/ConsoleOrganizationCreate/CreateTeamSpace";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.StringResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 팀의 공간 삭제
            /// /api/ConsoleOrganizationCreate/DeleteTeamSpace
            /// </summary>
            public static async UniTask<ResponseBase<Components.GetTeamInfoResponseResponseFormat>> PostConsoleOrganizationCreateDeleteTeamSpace(Components.DeleteTeamSpaceRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/ConsoleOrganizationCreate/DeleteTeamSpace";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.GetTeamInfoResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 그룹ID, 팀ID로 팀 정보 조회
            /// /api/ConsoleOrganizationCreate/GetTeamInfo
            /// </summary>
            public static async UniTask<ResponseBase<Components.GetTeamInfoResponseResponseFormat>> PostConsoleOrganizationCreateGetTeamInfo(Components.GetTeamInfoRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/ConsoleOrganizationCreate/GetTeamInfo";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.GetTeamInfoResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 그룹의 팀명 중복 체크
            /// /api/ConsoleOrganizationCreate/CheckExistTeamName
            /// </summary>
            public static async UniTask<ResponseBase<Components.BooleanResponseFormat>> PostConsoleOrganizationCreateCheckExistTeamName(Components.CheckExistTeamNameRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/ConsoleOrganizationCreate/CheckExistTeamName";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.BooleanResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 공간 템플릿 조회
            /// /api/ConsoleOrganizationCreate/GetSpaceTemplate
            /// </summary>
            public static async UniTask<ResponseBase<Components.GetSpaceTemplateResponseListResponseFormat>> PostConsoleOrganizationCreateGetSpaceTemplate(System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/ConsoleOrganizationCreate/GetSpaceTemplate";
                var response = await Client.POST.RequestAsync<Components.GetSpaceTemplateResponseListResponseFormat>(url, string.Empty, cts, option);
                return response;
            }
        }
        
        public class Credit
        {
            
            /// <summary>
            /// POST
            /// 그룹 재화(Group Asset) 조회, 0을 보내면 유료 크레딧(1) / 무료 체험권(2) 같이 줌
            /// /api/Credit/GetUserCredit
            /// </summary>
            public static async UniTask<ResponseBase<Components.CreditInfoResponseResponseFormat>> PostCreditGetUserCredit(Components.CreditInfoRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Credit/GetUserCredit";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.CreditInfoResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// Credit 충전 로그 조회
            /// /api/Credit/CreditLog
            /// </summary>
            public static async UniTask<ResponseBase<Components.CreditLogResponseResponseFormat>> PostCreditCreditLog(Components.CreditLogRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Credit/CreditLog";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.CreditLogResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// Credit 사용 내역
            /// /api/Credit/CompanyAssetLog
            /// </summary>
            public static async UniTask<ResponseBase<Components.CompanyAssetLogResponseResponseFormat>> PostCreditCompanyAssetLog(Components.CompanyAssetLogRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Credit/CompanyAssetLog";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.CompanyAssetLogResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
        }
        
        public class Delivery
        {
            
            /// <summary>
            /// POST
            /// 크레딧 상품 전달
            /// /api/Delivery/Credit
            /// </summary>
            public static async UniTask<ResponseBase<Components.DeliveryCreditResponseResponseFormat>> PostDeliveryCredit(Components.DeliveryCreditRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Delivery/Credit";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.DeliveryCreditResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
        }
        
        public class EmailTest
        {
            
            /// <summary>
            /// POST
            /// getTemplate
            /// /api/EmailTest/GetTemplate
            /// </summary>
            /// <param name="templateName">string</param>
            public static async UniTask<ResponseBase<Components.EmailTemplateResponseResponseFormat>> PostEmailTestGetTemplate(string templateName, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/EmailTest/GetTemplate";
                var response = await Client.POST.RequestAsync<Components.EmailTemplateResponseResponseFormat>(url, string.Empty, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// SendSingleMailRequest
            /// /api/EmailTest/SendSingleMailRequest
            /// </summary>
            public static async UniTask<ResponseBase<Components.JsonObjectResponseFormat>> PostEmailTestSendSingleMailRequest(Components.SendMailRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/EmailTest/SendSingleMailRequest";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.JsonObjectResponseFormat>(builder.Request, cts, option);
                return response;
            }
        }
        
        public class FileStorage
        {
            
            /// <summary>
            /// POST
            /// 파일 업로드
            /// /api/FileStorage/UploadFile
            /// </summary>
            public static async UniTask<ResponseBase<Components.UploadFileResponseResponseFormat>> PostFileStorageUploadFile(Components.UploadFileRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/FileStorage/UploadFile";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.UploadFileResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 다운로드 url 발급. (실패시 업로드 실패.)
            /// /api/FileStorage/GetFileDownloadUrl
            /// </summary>
            public static async UniTask<ResponseBase<Components.GetFileDownloadUrlResponseResponseFormat>> PostFileStorageGetFileDownloadUrl(Components.GetFileDownloadUrlRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/FileStorage/GetFileDownloadUrl";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.GetFileDownloadUrlResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 파일 삭제(메신저)
            /// /api/FileStorage/DeleteFile
            /// </summary>
            public static async UniTask<ResponseBase<Components.StringResponseFormat>> PostFileStorageDeleteFile(Components.DeleteFileRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/FileStorage/DeleteFile";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.StringResponseFormat>(builder.Request, cts, option);
                return response;
            }
        }
        
        public class Media
        {
            
            /// <summary>
            /// POST
            /// Media Bandwidth 조회(단순 Swagger조회용)
            /// /api/Media/GetMediaBandwidth
            /// </summary>
            public static async UniTask<ResponseBase<Components.GetMediaBandwidthResponseResponseFormat>> PostMediaGetMediaBandwidth(System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Media/GetMediaBandwidth";
                var response = await Client.POST.RequestAsync<Components.GetMediaBandwidthResponseResponseFormat>(url, string.Empty, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// Media Bandwidth Status 조회(단순 Swagger조회용)
            /// /api/Media/GetMediaBandwidthStatus
            /// </summary>
            public static async UniTask<ResponseBase<Components.GetMediaBandwidthStatusResponseResponseFormat>> PostMediaGetMediaBandwidthStatus(System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Media/GetMediaBandwidthStatus";
                var response = await Client.POST.RequestAsync<Components.GetMediaBandwidthStatusResponseResponseFormat>(url, string.Empty, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 스몰톡 생성
            /// /api/Media/CreateSmallTalk
            /// </summary>
            public static async UniTask<ResponseBase<Components.ManufactureCreateSmallTalkResponseResponseFormat>> PostMediaCreateSmallTalk(System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Media/CreateSmallTalk";
                var response = await Client.POST.RequestAsync<Components.ManufactureCreateSmallTalkResponseResponseFormat>(url, string.Empty, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 스몰톡 삭제
            /// /api/Media/DeleteSmallTalk
            /// </summary>
            public static async UniTask<ResponseBase<Components.StringResponseFormat>> PostMediaDeleteSmallTalk(Components.DeleteSmallTalkRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Media/DeleteSmallTalk";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.StringResponseFormat>(builder.Request, cts, option);
                return response;
            }
        }
        
        public class Meeting
        {
            
            /// <summary>
            /// POST
            /// 회의 예약
            /// /api/Meeting/Reservation
            /// </summary>
            public static async UniTask<ResponseBase<Components.ReservationResponseResponseFormat>> PostMeetingReservation(Components.ReservationRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Meeting/Reservation";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.ReservationResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 예약 설정 변경
            /// /api/Meeting/ReservationChange
            /// </summary>
            public static async UniTask<ResponseBase<Components.ReservationChangeResponseResponseFormat>> PostMeetingReservationChange(Components.ReservationChangeRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Meeting/ReservationChange";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.ReservationChangeResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 예약 취소
            /// /api/Meeting/ReservationCancel
            /// </summary>
            public static async UniTask<ResponseBase<Components.MeetingNullResponseResponseFormat>> PostMeetingReservationCancel(Components.MeetingIdRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Meeting/ReservationCancel";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.MeetingNullResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 내 회의 목록
            /// /api/Meeting/MyList
            /// </summary>
            public static async UniTask<ResponseBase<Components.MeetingEntityIEnumerableResponseFormat>> PostMeetingMyList(Components.MyListRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Meeting/MyList";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.MeetingEntityIEnumerableResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 특정 회의 정보 확인
            /// /api/Meeting/MeetingInfo
            /// </summary>
            public static async UniTask<ResponseBase<Components.MeetingEntityResponseFormat>> PostMeetingMeetingInfo(Components.MeetingIdRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Meeting/MeetingInfo";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.MeetingEntityResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 주최자 변경(삭제 예정, 기획 변경으로 주최자 변경 불가)
            /// /api/Meeting/OrganizerChange
            /// </summary>
            public static async UniTask<ResponseBase<Components.Int32ResponseFormat>> PostMeetingOrganizerChange(int requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Meeting/OrganizerChange";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(requestBody.ToString());
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.Int32ResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 커넥팅 중 멤버 내보내기(구현 중)
            /// /api/Meeting/ForcedOut
            /// </summary>
            public static async UniTask<ResponseBase<Components.MeetingNullResponseResponseFormat>> PostMeetingForcedOut(Components.ForcedOutRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Meeting/ForcedOut";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.MeetingNullResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 게스트 커넥팅 코드 체크
            /// /api/Meeting/GuestCheck
            /// </summary>
            public static async UniTask<ResponseBase<Components.GuestResponseResponseFormat>> PostMeetingGuestCheck(Components.GuestRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Meeting/GuestCheck";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.GuestResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 회의실 입장
            /// /api/Meeting/RoomJoin
            /// </summary>
            public static async UniTask<ResponseBase<Components.RoomJoinResponseResponseFormat>> PostMeetingRoomJoin(Components.RoomJoinRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Meeting/RoomJoin";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.RoomJoinResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 회의실 퇴장
            /// /api/Meeting/RoomLeave
            /// </summary>
            public static async UniTask<ResponseBase<Components.RoomLeaveResponseResponseFormat>> PostMeetingRoomLeave(Components.RoomLeaveRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Meeting/RoomLeave";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.RoomLeaveResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 커넥팅 종료(주최자용)
            /// /api/Meeting/End
            /// </summary>
            public static async UniTask<ResponseBase<Components.MeetingNullResponseResponseFormat>> PostMeetingEnd(Components.MeetingIdRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Meeting/End";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.MeetingNullResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 초대 요청(주최자 -> 참가자)
            /// /api/Meeting/Invite
            /// </summary>
            public static async UniTask<ResponseBase<Components.InviteResponseResponseFormat>> PostMeetingInvite(Components.InviteRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Meeting/Invite";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.InviteResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 초대 수락(참가자)
            /// /api/Meeting/InviteAccept
            /// </summary>
            public static async UniTask<ResponseBase<Components.MeetingNullResponseResponseFormat>> PostMeetingInviteAccept(Components.MeetingIdRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Meeting/InviteAccept";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.MeetingNullResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 초대 거절(참가자)
            /// /api/Meeting/InviteReject
            /// </summary>
            public static async UniTask<ResponseBase<Components.MeetingNullResponseResponseFormat>> PostMeetingInviteReject(Components.MeetingIdRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Meeting/InviteReject";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.MeetingNullResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 초대 취소(주최자)
            /// /api/Meeting/InviteCancel
            /// </summary>
            public static async UniTask<ResponseBase<Components.InviteCancelResponseResponseFormat>> PostMeetingInviteCancel(Components.InviteCancelRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Meeting/InviteCancel";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.InviteCancelResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 참여 요청(참가자 -> 주최자)
            /// /api/Meeting/Attendance
            /// </summary>
            public static async UniTask<ResponseBase<Components.AttendanceResponseResponseFormat>> PostMeetingAttendance(Components.AttendanceRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Meeting/Attendance";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.AttendanceResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 참여 요청 취소(참가자 -> 주최자)
            /// /api/Meeting/AttendanceCancel
            /// </summary>
            public static async UniTask<ResponseBase<Components.MeetingNullResponseResponseFormat>> PostMeetingAttendanceCancel(Components.MeetingIdRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Meeting/AttendanceCancel";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.MeetingNullResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 대기자 수락(주최자)
            /// /api/Meeting/WaitListAccept
            /// </summary>
            public static async UniTask<ResponseBase<Components.MeetingNullResponseResponseFormat>> PostMeetingWaitListAccept(Components.WaitListAcceptRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Meeting/WaitListAccept";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.MeetingNullResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 대기자 거절(주최자)
            /// /api/Meeting/WaitListReject
            /// </summary>
            public static async UniTask<ResponseBase<Components.MeetingNullResponseResponseFormat>> PostMeetingWaitListReject(Components.WaitListAcceptRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Meeting/WaitListReject";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.MeetingNullResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 권한 변경(주최자)
            /// /api/Meeting/AuthorityChange
            /// </summary>
            public static async UniTask<ResponseBase<Components.MeetingNullResponseResponseFormat>> PostMeetingAuthorityChange(Components.AuthorityChangeRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Meeting/AuthorityChange";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.MeetingNullResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 종료 시간 연장(주최자)
            /// /api/Meeting/ExtendEnd
            /// </summary>
            public static async UniTask<ResponseBase<Components.MeetingNullResponseResponseFormat>> PostMeetingExtendEnd(Components.ExtendEndRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Meeting/ExtendEnd";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.MeetingNullResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 상세 검색
            /// /api/Meeting/SearchByDetail
            /// </summary>
            public static async UniTask<ResponseBase<Components.MeetingEntityIEnumerableResponseFormat>> PostMeetingSearchByDetail(Components.SearchByDetailRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Meeting/SearchByDetail";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.MeetingEntityIEnumerableResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 커넥팅 코드 검색
            /// /api/Meeting/SearchByMeetingCode
            /// </summary>
            public static async UniTask<ResponseBase<Components.MeetingEntityResponseFormat>> PostMeetingSearchByMeetingCode(Components.SearchByMeetingCodeRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Meeting/SearchByMeetingCode";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.MeetingEntityResponseFormat>(builder.Request, cts, option);
                return response;
            }
        }
        
        public class Messenger
        {
            
            /// <summary>
            /// POST
            /// 회원탈퇴
            /// /api/Messenger/Withdrawal
            /// </summary>
            public static async UniTask<ResponseBase<Components.StringResponseFormat>> PostMessengerWithdrawal(Components.WithdrawalRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Messenger/Withdrawal";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.StringResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 로그인 요청 (삭제 예정)
            /// /api/Messenger/Login
            /// </summary>
            public static async UniTask<ResponseBase<Components.LoginResponseResponseFormat>> PostMessengerLogin(Components.LoginRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Messenger/Login";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.LoginResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 그룹, 멤버 List를 내려 받는다.
            /// /api/Messenger/GetGroupList
            /// </summary>
            public static async UniTask<ResponseBase<Components.GroupListResponseResponseFormat>> PostMessengerGetGroupList(Components.GroupListRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Messenger/GetGroupList";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.GroupListResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 그룹 생성
            /// /api/Messenger/GroupCreate
            /// </summary>
            public static async UniTask<ResponseBase<Components.CreateGroupResponseResponseFormat>> PostMessengerGroupCreate(Components.CreateGroupRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Messenger/GroupCreate";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.CreateGroupResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 그룹 삭제
            /// /api/Messenger/GroupDelete
            /// </summary>
            public static async UniTask<ResponseBase<Components.JsonValueResponseFormat>> PostMessengerGroupDelete(Components.GroupDeleteRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Messenger/GroupDelete";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.JsonValueResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 그룹 편집
            /// /api/Messenger/GroupEdit
            /// </summary>
            public static async UniTask<ResponseBase<Components.GroupEditResponseResponseFormat>> PostMessengerGroupEdit(Components.GroupEditRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Messenger/GroupEdit";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.GroupEditResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 그룹 멤버 초대
            /// /api/Messenger/GroupInviteMember
            /// </summary>
            public static async UniTask<ResponseBase<Components.GroupInviteMemberResponseResponseFormat>> PostMessengerGroupInviteMember(Components.GroupInviteMemberRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Messenger/GroupInviteMember";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.GroupInviteMemberResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 그룹 멤버 삭제
            /// /api/Messenger/GroupDismissMember
            /// </summary>
            public static async UniTask<ResponseBase<Components.JsonValueResponseFormat>> PostMessengerGroupDismissMember(Components.GroupDismissMemberRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Messenger/GroupDismissMember";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.JsonValueResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 그룹 정보 조회
            /// /api/Messenger/GetGroupInfo
            /// </summary>
            public static async UniTask<ResponseBase<Components.ManufactureGroupInfoResponseResponseFormat>> PostMessengerGetGroupInfo(Components.GroupInfoRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Messenger/GetGroupInfo";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.ManufactureGroupInfoResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 특정 그룹 정보, 멤버 목록 조회
            /// /api/Messenger/GetParticularGroupInfo
            /// </summary>
            public static async UniTask<ResponseBase<Components.ParticularGroupInfoResponseResponseFormat>> PostMessengerGetParticularGroupInfo(Components.ParticularGroupInfoRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Messenger/GetParticularGroupInfo";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.ParticularGroupInfoResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 그룹 멤버 정보 수정
            /// /api/Messenger/GroupMemberInfoEdit
            /// </summary>
            public static async UniTask<ResponseBase<Components.GroupMemberInfoEditResponseResponseFormat>> PostMessengerGroupMemberInfoEdit(Components.GroupMemberInfoEditRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Messenger/GroupMemberInfoEdit";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.GroupMemberInfoEditResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 조직도 차트 조회
            /// /api/Messenger/GetOrganizationChart
            /// </summary>
            public static async UniTask<ResponseBase<Components.DepartmentPayloadIEnumerableResponseFormat>> PostMessengerGetOrganizationChart(System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Messenger/GetOrganizationChart";
                var response = await Client.POST.RequestAsync<Components.DepartmentPayloadIEnumerableResponseFormat>(url, string.Empty, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 조직도 차트 조회(String)
            /// /api/Messenger/GetOrganizationStringChart
            /// </summary>
            public static async UniTask<ResponseBase<System.String>> PostMessengerGetOrganizationStringChart(System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Messenger/GetOrganizationStringChart";
                var response = await Client.POST.RequestAsync<System.String>(url, string.Empty, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 파일 스토리지 설정값 swagger 에서 조회(단순 config value 확인용 추후 삭제)
            /// /api/Messenger/ReturnFileStorageServiceName
            /// </summary>
            public static async UniTask<ResponseBase<System.String>> PostMessengerReturnFileStorageServiceName(System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Messenger/ReturnFileStorageServiceName";
                var response = await Client.POST.RequestAsync<System.String>(url, string.Empty, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 서비스 이름으로 업로드 되어있는 파일 목록 조회
            /// /api/Messenger/GetUploadedFileList
            /// </summary>
            public static async UniTask<ResponseBase<Components.UploadedFileListResponseToClientResponseFormat>> PostMessengerGetUploadedFileList(System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Messenger/GetUploadedFileList";
                var response = await Client.POST.RequestAsync<Components.UploadedFileListResponseToClientResponseFormat>(url, string.Empty, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 서비스 이름, 경로, 파일명으로 업로드 되어있는 파일 조회
            /// /api/Messenger/GetUploadedFile
            /// </summary>
            public static async UniTask<ResponseBase<Components.GetUploadedFileResponseToClientResponseFormat>> PostMessengerGetUploadedFile(Components.GetUploadedFileRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Messenger/GetUploadedFile";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.GetUploadedFileResponseToClientResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 파일 다운로드
            /// /api/Messenger/DownloadFile
            /// </summary>
            public static async UniTask<ResponseBase<Components.DownloadFileResponseResponseFormat>> PostMessengerDownloadFile(Components.DownloadFileRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Messenger/DownloadFile";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.DownloadFileResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 업로드한 파일 삭제
            /// /api/Messenger/DeleteUploadedFile
            /// </summary>
            public static async UniTask<ResponseBase<Components.DeleteUploadedFileResponseResponseFormat>> PostMessengerDeleteUploadedFile(Components.DeleteUploadedFileRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Messenger/DeleteUploadedFile";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.DeleteUploadedFileResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// chatgpt 질문 3~4초 걸릴 수 있음.
            /// /api/Messenger/UsingChatGPT
            /// </summary>
            public static async UniTask<ResponseBase<Components.ChatGPTResponseResponseFormat>> PostMessengerUsingChatGpt(Components.ChatGPTClientRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Messenger/UsingChatGPT";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.ChatGPTResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
        }
        
        public class Organization
        {
            
            /// <summary>
            /// POST
            /// 조직도(사용 x, 스웨거용)  [로그인 시 따로 전송]
            /// /OrganizationChart
            /// </summary>
            public static async UniTask<ResponseBase<Components.OrganizationChartResponseResponseFormat>> PostOrganizationChart(Components.OrganizationChartRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/OrganizationChart";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.OrganizationChartResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 해당 그룹의 공간이 활성화 되어있는 팀 정보 조회
            /// /GetActivatedTeamSpaceInfo
            /// </summary>
            public static async UniTask<ResponseBase<Components.GetActivatedTeamSpaceInfoResponseResponseFormat>> PostGetActivatedTeamSpaceInfo(Components.GetActivatedTeamSpaceInfoRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/GetActivatedTeamSpaceInfo";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.GetActivatedTeamSpaceInfoResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 그룹의 팀 공간 이동
            /// /WarpGroupTeamSpace
            /// </summary>
            public static async UniTask<ResponseBase<Components.MoveGroupTeamSpaceResonseResponseFormat>> PostWarpGroupTeamSpace(Components.MoveGroupTeamSpaceRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/WarpGroupTeamSpace";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.MoveGroupTeamSpaceResonseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 내 팀 이동
            /// /WarpGroupMyTeamSpace
            /// </summary>
            public static async UniTask<ResponseBase<Components.WarpGroupMyTeamSpaceResponseResponseFormat>> PostWarpGroupMyTeamSpace(Components.WarpGroupMyTeamSpaceRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/WarpGroupMyTeamSpace";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.WarpGroupMyTeamSpaceResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 내 그룹 휴게공간 이동
            /// /WarpGroupRestSpace
            /// </summary>
            public static async UniTask<ResponseBase<Components.WarpGroupRestSpaceResponseResponseFormat>> PostWarpGroupRestSpace(Components.WarpGroupRestSpaceRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/WarpGroupRestSpace";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.WarpGroupRestSpaceResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 빌딩의 대표공간 이동(하드코딩)
            /// /WarpBuildingRepresentSpace
            /// </summary>
            public static async UniTask<ResponseBase<Components.WarpBuildingRepresentSpaceResponseResponseFormat>> PostWarpBuildingRepresentSpace(Components.WarpBuildingRepresentSpaceRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/WarpBuildingRepresentSpace";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.WarpBuildingRepresentSpaceResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 빌딩의 대표공간 채팅 입장
            /// /JoinBuildingRepresentSpaceChatGroup
            /// </summary>
            public static async UniTask<ResponseBase<Components.JoinBuildingRepresentSpaceChatGroupResponseResponseFormat>> PostJoinBuildingRepresentSpaceChatGroup(Components.JoinBuildingRepresentSpaceChatGroupRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/JoinBuildingRepresentSpaceChatGroup";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.JoinBuildingRepresentSpaceChatGroupResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
        }
        
        public class Session
        {
            
            /// <summary>
            /// POST
            /// 즐겨찾기 그룹 변경
            /// /api/Session/Login
            /// </summary>
            public static async UniTask<ResponseBase<Components.CheckResult>> PostSessionLogin(System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Session/Login";
                var response = await Client.POST.RequestAsync<Components.CheckResult>(url, string.Empty, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 즐겨찾기 그룹 변경
            /// /api/Session/Ping
            /// </summary>
            public static async UniTask<ResponseBase<Components.CheckResult>> PostSessionPing(System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/Session/Ping";
                var response = await Client.POST.RequestAsync<Components.CheckResult>(url, string.Empty, cts, option);
                return response;
            }
        }
        
        public class SpeechToText
        {
            
            /// <summary>
            /// POST
            /// 녹음 시작
            /// /api/SpeechToText/RecordStart
            /// </summary>
            public static async UniTask<ResponseBase<Components.SpeechToTextRecordResponseResponseFormat>> PostSpeechToTextRecordStart(Components.SpeechToTextRecordRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/SpeechToText/RecordStart";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.SpeechToTextRecordResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 녹음 중단
            /// /api/SpeechToText/RecordStop
            /// </summary>
            public static async UniTask<ResponseBase<Components.SpeechToTextRecordStopResponseResponseFormat>> PostSpeechToTextRecordStop(Components.SpeechToTextRecordRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/SpeechToText/RecordStop";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.SpeechToTextRecordStopResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 녹음 사용량 조회
            /// /api/SpeechToText/RecordUsage
            /// </summary>
            public static async UniTask<ResponseBase<Components.RecordUsageResponseResponseFormat>> PostSpeechToTextRecordUsage(Components.RecordUsageRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/SpeechToText/RecordUsage";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.RecordUsageResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 파일 내역 조회
            /// /api/SpeechToText/RecordInfo
            /// </summary>
            public static async UniTask<ResponseBase<Components.SpeechToTextRecordInfoResponseResponseFormat>> PostSpeechToTextRecordInfo(Components.SpeechToTextRecordInfoRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/SpeechToText/RecordInfo";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.SpeechToTextRecordInfoResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 파일 변환 요청
            /// /api/SpeechToText/TranscriptionStart
            /// </summary>
            public static async UniTask<ResponseBase<Components.SpeechToTextRecordInfoResponseResponseFormat>> PostSpeechToTextTranscriptionStart(Components.SpeechToTextTranscriptionStartRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/SpeechToText/TranscriptionStart";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.SpeechToTextRecordInfoResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// STT 파일 다운로드 주소 요청
            /// /api/SpeechToText/FileDownloadUrl
            /// </summary>
            public static async UniTask<ResponseBase<Components.FileDownloadUrlResponseResponseFormat>> PostSpeechToTextFileDownloadUrl(Components.FileDownloadUrlRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/SpeechToText/FileDownloadUrl";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.FileDownloadUrlResponseResponseFormat>(builder.Request, cts, option);
                return response;
            }
        }
        
        public class TodayBoard
        {
            
            /// <summary>
            /// POST
            /// 오늘의 한마디 게시판 글 조회
            /// /api/TodayBoard/List
            /// </summary>
            public static async UniTask<ResponseBase<Components.TodayBoardEntityIEnumerableResponseFormat>> PostTodayBoardList(Components.ListRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/TodayBoard/List";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.TodayBoardEntityIEnumerableResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 오늘의 한마디 게시글 삭제
            /// /api/TodayBoard/Delete
            /// </summary>
            public static async UniTask<ResponseBase<Components.Int32NullableResponseFormat>> PostTodayBoardDelete(Components.BoardSeqRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/TodayBoard/Delete";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.Int32NullableResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 오늘의 한마디 게시글 추천 토글
            /// /api/TodayBoard/Recommend
            /// </summary>
            public static async UniTask<ResponseBase<Components.Int32NullableResponseFormat>> PostTodayBoardRecommend(Components.BoardSeqRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/TodayBoard/Recommend";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.Int32NullableResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 오늘의 한마디 게시판 글 등록
            /// /api/TodayBoard/Enroll
            /// </summary>
            public static async UniTask<ResponseBase<Components.Int32ResponseFormat>> PostTodayBoardEnroll(Components.EnrollRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/TodayBoard/Enroll";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.Int32ResponseFormat>(builder.Request, cts, option);
                return response;
            }
        }
        
        public class VoiceBoard
        {
            
            /// <summary>
            /// POST
            /// 음성게시판 조회
            /// /api/VoiceBoard/GetVoiceBoard
            /// </summary>
            public static async UniTask<ResponseBase<Components.VoiceBoardEntityIEnumerableResponseFormat>> PostVoiceBoardGetVoiceBoard(Components.GetVoiceBoardRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/VoiceBoard/GetVoiceBoard";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.VoiceBoardEntityIEnumerableResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 음성게시판 게시물 등록
            /// /api/VoiceBoard/EnrollVoiceBoardPost
            /// </summary>
            public static async UniTask<ResponseBase<Components.Int32ResponseFormat>> PostVoiceBoardEnrollVoiceBoardPost(Components.EnrollVoiceBoardPostRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/VoiceBoard/EnrollVoiceBoardPost";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.Int32ResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 음성게시판 게시물 삭제
            /// /api/VoiceBoard/DeleteVoiceBoardPost
            /// </summary>
            public static async UniTask<ResponseBase<Components.Int32ResponseFormat>> PostVoiceBoardDeleteVoiceBoardPost(Components.DeleteVoiceBoardPostRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/VoiceBoard/DeleteVoiceBoardPost";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.Int32ResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 음성게시판 게시물 추천
            /// /api/VoiceBoard/RecommendVoiceBoardPost
            /// </summary>
            public static async UniTask<ResponseBase<Components.Int32ResponseFormat>> PostVoiceBoardRecommendVoiceBoardPost(Components.RecommendVoiceBoardPostRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/VoiceBoard/RecommendVoiceBoardPost";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.Int32ResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 음성게시판 게시물 추천 취소
            /// /api/VoiceBoard/CancelRecommendVoiceBoardPost
            /// </summary>
            public static async UniTask<ResponseBase<Components.Int32ResponseFormat>> PostVoiceBoardCancelRecommendVoiceBoardPost(Components.RecommendVoiceBoardPostRequest requestBody, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/VoiceBoard/CancelRecommendVoiceBoardPost";
                using var builder = HttpRequestBuilder.CreateNew(Client.eRequestType.POST, url);
                builder.SetContent(JsonConvert.SerializeObject(requestBody));
                builder.SetContentType(Client.Constant.ContentJson);
                var response = await Client.Message.Request<Components.Int32ResponseFormat>(builder.Request, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// 조직도 그룹 파싱 (삭제x)
            /// /api/VoiceBoard/parse
            /// </summary>
            public static async UniTask<ResponseBase<Components.GroupResponseFormat>> PostVoiceBoardParse(System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/VoiceBoard/parse";
                var response = await Client.POST.RequestAsync<Components.GroupResponseFormat>(url, string.Empty, cts, option);
                return response;
            }
        }
        
        public class WhiteBoardTest
        {
            
            /// <summary>
            /// POST
            /// createBoard
            /// /api/WhiteBoardTest/CreateWhiteBoard
            /// </summary>
            /// <param name="projectId">string</param>
            /// <param name="name">string</param>
            /// <param name="description">string</param>
            public static async UniTask<ResponseBase<Components.CreateWhiteBoardResponse>> PostWhiteBoardTestCreateWhiteBoard(string projectId, string name, string description, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/WhiteBoardTest/CreateWhiteBoard";
                var response = await Client.POST.RequestAsync<Components.CreateWhiteBoardResponse>(url, string.Empty, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// CreateProject
            /// /api/WhiteBoardTest/CreateWhiteBoardProject
            /// </summary>
            /// <param name="name">string</param>
            public static async UniTask<ResponseBase<Components.ProjectResponseInfo>> PostWhiteBoardTestCreateWhiteBoardProject(string name, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/WhiteBoardTest/CreateWhiteBoardProject";
                var response = await Client.POST.RequestAsync<Components.ProjectResponseInfo>(url, string.Empty, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// DeleteProject
            /// /api/WhiteBoardTest/DeleteWhiteBoardProject
            /// </summary>
            /// <param name="projectId">string</param>
            public static async UniTask<ResponseBase<System.Boolean>> PostWhiteBoardTestDeleteWhiteBoardProject(string projectId, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/WhiteBoardTest/DeleteWhiteBoardProject";
                var response = await Client.POST.RequestAsync<System.Boolean>(url, string.Empty, cts, option);
                return response;
            }
            
            /// <summary>
            /// POST
            /// DeleteProject
            /// /api/WhiteBoardTest/Forbid/{word}
            /// </summary>
            /// <param name="word">string</param>
            public static async UniTask<ResponseBase<System.Boolean>> PostWhiteBoardTestForbid(string word, System.Threading.CancellationTokenSource cts = null, RequestOption option = null)
            {
                if (!Util.InstanceExists || !Util.Instance.TrySetAuthToken())
                {
                    return null;
                }
                option = option ?? RequestOption.Default;
                string url = $"{ApiUrl}/api/WhiteBoardTest/Forbid/{word}";
                var response = await Client.POST.RequestAsync<System.Boolean>(url, string.Empty, cts, option);
                return response;
            }
        }
    }
    
    public class Components
    {
        
        [Serializable()]
        public class ActivatedSpaceTeamInfo
        {
            
            [JsonProperty("teamId")]
            public long TeamId { get; set; } //;
            
            [JsonProperty("teamName")]
            public string TeamName { get; set; } //;
            
            [JsonProperty("spaceId")]
            public string SpaceId { get; set; } //;
        }
        
        public enum AttendanceCode
        {
            
            AttendanceCodeNone = 0,
            
            Join = 1,
            
            Viewer = 2,
            
            JoinRequest = 3,
            
            JoinReceive = 4,
        }
        
        [Serializable()]
        public class AttendanceRequest
        {
            
            [JsonProperty("meetingId")]
            public long MeetingId { get; set; } //;
        }
        
        [Serializable()]
        public class AttendanceResponse
        {
        }
        
        [Serializable()]
        public class AttendanceResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.AttendanceResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class AuthorityChangeRequest
        {
            
            [JsonProperty("meetingId")]
            public long MeetingId { get; set; } //;
            
            [JsonProperty("meetingMember")]
            public Components.MeetingMemberEntity MeetingMember { get; set; } //;
        }
        
        public enum AuthorityCode
        {
            
            AuthorityCodeNone = 0,
            
            Organizer = 1,
            
            Presenter = 2,
            
            Participant = 3,
        }
        
        [Serializable()]
        public class BannerAd
        {
            
            [JsonProperty("imagePath")]
            public string ImagePath { get; set; } //;
            
            [JsonProperty("redirectUrl")]
            public string RedirectUrl { get; set; } //;
        }
        
        [Serializable()]
        public class BoConfigurationEntity
        {
            
            [JsonProperty("group_id")]
            public long GroupId { get; set; } //;
            
            [JsonProperty("configuration_code")]
            public int ConfigurationCode { get; set; } //;
            
            [JsonProperty("configuration_value")]
            public string ConfigurationValue { get; set; } //;
            
            [JsonProperty("create_user_id")]
            public string CreateUserId { get; set; } //;
            
            [JsonProperty("update_user_id")]
            public string UpdateUserId { get; set; } //;
        }
        
        [Serializable()]
        public class BoConfigurationEntityIEnumerableResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.BoConfigurationEntity[] Data { get; set; } //;
        }
        
        [Serializable()]
        public class BoardSeqRequest
        {
            
            [JsonProperty("boardSeq")]
            public long BoardSeq { get; set; } //;
        }
        
        [Serializable()]
        public class BooleanResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public bool Data { get; set; } //;
        }
        
        public enum ChannelType
        {
            
            ChannelTypeNone = 0,
            
            Meeting = 1,
            
            SmallTalk = 2,
            
            P2PCall = 3,
            
            TeamworkCall = 4,
            
            PartyTalk = 5,
        }
        
        [Serializable()]
        public class ChatGPTClientRequest
        {
            
            [JsonProperty("messages")]
            public Components.ChatGPTMessageType[] Messages { get; set; } //;
        }
        
        [Serializable()]
        public class ChatGPTMessageType
        {
            
            [JsonProperty("role")]
            public string Role { get; set; } //;
            
            [JsonProperty("message")]
            public string Message { get; set; } //;
        }
        
        [Serializable()]
        public class ChatGPTResponse
        {
            
            [JsonProperty("groupId")]
            public string GroupId { get; set; } //;
            
            [JsonProperty("userId")]
            public string UserId { get; set; } //;
            
            [JsonProperty("replyMessage")]
            public Components.ChatGPTMessageType ReplyMessage { get; set; } //;
        }
        
        [Serializable()]
        public class ChatGPTResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.ChatGPTResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class CheckExistTeamNameRequest
        {
            
            [JsonProperty("groupId")]
            public long GroupId { get; set; } //;
            
            [JsonProperty("teamName")]
            public string TeamName { get; set; } //;
        }
        
        [Serializable()]
        public class CheckResult
        {
            
            [JsonProperty("result")]
            public bool Result { get; set; } //;
            
            [JsonProperty("reason")]
            public string Reason { get; set; } //;
        }
        
        [Serializable()]
        public class CompanyAssetLogInfo
        {
            
            [JsonProperty("idx")]
            public int Idx { get; set; } //;
            
            [JsonProperty("regDate")]
            public System.DateTime RegDate { get; set; } //;
            
            [JsonProperty("creditAmount")]
            public int CreditAmount { get; set; } //;
            
            [JsonProperty("logType")]
            public int LogType { get; set; } //;
            
            [JsonProperty("usedTime")]
            public int UsedTime { get; set; } //;
            
            [JsonProperty("memberName")]
            public string MemberName { get; set; } //;
            
            [JsonProperty("accountId")]
            public string AccountId { get; set; } //;
        }
        
        [Serializable()]
        public class CompanyAssetLogRequest
        {
            
            [JsonProperty("groupId")]
            public long GroupId { get; set; } //;
            
            [JsonProperty("pageNum")]
            public int PageNum { get; set; } //;
            
            [JsonProperty("pageSize")]
            public int PageSize { get; set; } //;
            
            [JsonProperty("startDatetime")]
            public System.DateTime StartDatetime { get; set; } //;
            
            [JsonProperty("endDatetime")]
            public System.DateTime EndDatetime { get; set; } //;
        }
        
        [Serializable()]
        public class CompanyAssetLogResponse
        {
            
            [JsonProperty("pageNum")]
            public int PageNum { get; set; } //;
            
            [JsonProperty("totalCount")]
            public int TotalCount { get; set; } //;
            
            [JsonProperty("companyAssetLogInfos")]
            public Components.CompanyAssetLogInfo[] CompanyAssetLogInfos { get; set; } //;
        }
        
        [Serializable()]
        public class CompanyAssetLogResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.CompanyAssetLogResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class Config
        {
            
            [JsonProperty("bandwidth")]
            public long Bandwidth { get; set; } //;
            
            [JsonProperty("upThreshold")]
            public int UpThreshold { get; set; } //;
            
            [JsonProperty("downThreshold")]
            public int DownThreshold { get; set; } //;
        }
        
        [Serializable()]
        public class CreateGroupRequest
        {
            
            [JsonProperty("groupName")]
            public string GroupName { get; set; } //;
            
            [JsonProperty("groupType")]
            public int GroupType { get; set; } //;
            
            [JsonProperty("createUserId")]
            public string CreateUserId { get; set; } //;
            
            [JsonProperty("serviceType")]
            public int ServiceType { get; set; } //;
            
            [JsonProperty("areaName")]
            public string AreaName { get; set; } //;
            
            [JsonProperty("users")]
            public Components.CreateUser[] Users { get; set; } //;
        }
        
        [Serializable()]
        public class CreateGroupResponse
        {
            
            [JsonProperty("groupId")]
            public string GroupId { get; set; } //;
            
            [JsonProperty("groupName")]
            public string GroupName { get; set; } //;
            
            [JsonProperty("groupType")]
            public int GroupType { get; set; } //;
            
            [JsonProperty("createUserId")]
            public string CreateUserId { get; set; } //;
            
            [JsonProperty("serviceType")]
            public int ServiceType { get; set; } //;
            
            [JsonProperty("areaName")]
            public string AreaName { get; set; } //;
            
            [JsonProperty("users")]
            public Components.JsonNode[] Users { get; set; } //;
            
            [JsonProperty("createDatetime")]
            public long CreateDatetime { get; set; } //;
            
            [JsonProperty("groupCount")]
            public int GroupCount { get; set; } //;
        }
        
        [Serializable()]
        public class CreateGroupResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.CreateGroupResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class CreateMember
        {
            
            [JsonProperty("memberName")]
            public string MemberName { get; set; } //;
            
            [JsonProperty("levelName")]
            public string LevelName { get; set; } //;
            
            [JsonProperty("positionName")]
            public string PositionName { get; set; } //;
            
            [JsonProperty("telNo")]
            public string TelNo { get; set; } //;
            
            [JsonProperty("photoPath")]
            public string PhotoPath { get; set; } //;
            
            [JsonProperty("task")]
            public string Task { get; set; } //;
        }
        
        [Serializable()]
        public class CreateTeam
        {
            
            [JsonProperty("teamName")]
            public string TeamName { get; set; } //;
            
            [JsonProperty("templateId")]
            public long TemplateId { get; set; } //;
            
            [JsonProperty("description")]
            public string Description { get; set; } //;
        }
        
        [Serializable()]
        public class CreateTeamRequest
        {
            
            [JsonProperty("groupId")]
            public long GroupId { get; set; } //;
            
            [JsonProperty("teamName")]
            public string TeamName { get; set; } //;
            
            [JsonProperty("parentTeamId")]
            public long ParentTeamId { get; set; } //;
            
            [JsonProperty("templateId")]
            public long TemplateId { get; set; } //;
            
            [JsonProperty("description")]
            public string Description { get; set; } //;
        }
        
        [Serializable()]
        public class CreateTeamResponse
        {
            
            [JsonProperty("teamId")]
            public long TeamId { get; set; } //;
        }
        
        [Serializable()]
        public class CreateTeamResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.CreateTeamResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class CreateTeamSpaceRequest
        {
            
            [JsonProperty("groupId")]
            public long GroupId { get; set; } //;
            
            [JsonProperty("teamId")]
            public long TeamId { get; set; } //;
            
            [JsonProperty("templateId")]
            public long TemplateId { get; set; } //;
            
            [JsonProperty("description")]
            public string Description { get; set; } //;
        }
        
        [Serializable()]
        public class CreateUser
        {
            
            [JsonProperty("userId")]
            public string UserId { get; set; } //;
            
            [JsonProperty("userRole")]
            public int UserRole { get; set; } //;
            
            [JsonProperty("hivePlayerId")]
            public long HivePlayerId { get; set; } //;
        }
        
        [Serializable()]
        public class CreateWhiteBoardResponse
        {
            
            [JsonProperty("id")]
            public string Id { get; set; } //;
            
            [JsonProperty("type")]
            public string Type { get; set; } //;
            
            [JsonProperty("name")]
            public string Name { get; set; } //;
            
            [JsonProperty("description")]
            public string Description { get; set; } //;
            
            [JsonProperty("links")]
            public Components.Links Links { get; set; } //;
            
            [JsonProperty("createdAt")]
            public System.DateTime CreatedAt { get; set; } //;
            
            [JsonProperty("createdBy")]
            public Components.UserInfo CreatedBy { get; set; } //;
            
            [JsonProperty("currentUserMembership")]
            public Components.MembershipInfo CurrentUserMembership { get; set; } //;
            
            [JsonProperty("modifiedAt")]
            public System.DateTime ModifiedAt { get; set; } //;
            
            [JsonProperty("modifiedBy")]
            public Components.UserInfo ModifiedBy { get; set; } //;
            
            [JsonProperty("owner")]
            public Components.UserInfo Owner { get; set; } //;
            
            [JsonProperty("permissionsPolicy")]
            public Components.PermissionsPolicy PermissionsPolicy { get; set; } //;
            
            [JsonProperty("policy")]
            public Components.Policy Policy { get; set; } //;
            
            [JsonProperty("project")]
            public Components.ProjectInfo Project { get; set; } //;
            
            [JsonProperty("sharingPolicy")]
            public Components.SharingPolicy SharingPolicy { get; set; } //;
            
            [JsonProperty("team")]
            public Components.TeamInfo Team { get; set; } //;
            
            [JsonProperty("viewLink")]
            public string ViewLink { get; set; } //;
        }
        
        [Serializable()]
        public class CreditInfoRequest
        {
            
            [JsonProperty("groupId")]
            public long GroupId { get; set; } //;
            
            [JsonProperty("groupAssetType")]
            public Components.GroupAssetType GroupAssetType { get; set; } //;
        }
        
        [Serializable()]
        public class CreditInfoResponse
        {
            
            [JsonProperty("groupAssetEntities")]
            public Components.GroupAssetEntity[] GroupAssetEntities { get; set; } //;
        }
        
        [Serializable()]
        public class CreditInfoResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.CreditInfoResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class CreditLogInfo
        {
            
            [JsonProperty("paymentIdx")]
            public int PaymentIdx { get; set; } //;
            
            [JsonProperty("productName")]
            public string ProductName { get; set; } //;
            
            [JsonProperty("productId")]
            public long ProductId { get; set; } //;
            
            [JsonProperty("paymentDatetime")]
            public System.DateTime PaymentDatetime { get; set; } //;
            
            [JsonProperty("paymentAmount")]
            public int PaymentAmount { get; set; } //;
            
            [JsonProperty("addCredit")]
            public int AddCredit { get; set; } //;
        }
        
        [Serializable()]
        public class CreditLogRequest
        {
            
            [JsonProperty("groupId")]
            public long GroupId { get; set; } //;
            
            [JsonProperty("pageNum")]
            public int PageNum { get; set; } //;
            
            [JsonProperty("pageSize")]
            public int PageSize { get; set; } //;
            
            [JsonProperty("startDatetime")]
            public System.DateTime StartDatetime { get; set; } //;
            
            [JsonProperty("endDatetime")]
            public System.DateTime EndDatetime { get; set; } //;
        }
        
        [Serializable()]
        public class CreditLogResponse
        {
            
            [JsonProperty("pageNum")]
            public int PageNum { get; set; } //;
            
            [JsonProperty("totalCount")]
            public int TotalCount { get; set; } //;
            
            [JsonProperty("creditLogInfos")]
            public Components.CreditLogInfo[] CreditLogInfos { get; set; } //;
        }
        
        [Serializable()]
        public class CreditLogResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.CreditLogResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class CustomerFileUsage
        {
            
            [JsonProperty("totalSize")]
            public long TotalSize { get; set; } //;
        }
        
        [Serializable()]
        public class CustomerFileUsageResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.CustomerFileUsage Data { get; set; } //;
        }
        
        [Serializable()]
        public class DeeplinkParamGetRequest
        {
            
            [JsonProperty("deeplinkType")]
            public Components.DeeplinkType DeeplinkType { get; set; } //;
            
            [JsonProperty("deeplinkValue")]
            public string DeeplinkValue { get; set; } //;
        }
        
        [Serializable()]
        public class DeeplinkParamGetResponse
        {
            
            [JsonProperty("deeplinkParam")]
            public string DeeplinkParam { get; set; } //;
        }
        
        [Serializable()]
        public class DeeplinkParamGetResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.DeeplinkParamGetResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class DeeplinkParamParseRequest
        {
            
            [JsonProperty("deeplinkType")]
            public Components.DeeplinkType DeeplinkType { get; set; } //;
            
            [JsonProperty("deeplinkParam")]
            public string DeeplinkParam { get; set; } //;
        }
        
        [Serializable()]
        public class DeeplinkParamParseResponse
        {
            
            [JsonProperty("deeplinkType")]
            public Components.DeeplinkType DeeplinkType { get; set; } //;
            
            [JsonProperty("deeplinkValue")]
            public string DeeplinkValue { get; set; } //;
        }
        
        [Serializable()]
        public class DeeplinkParamParseResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.DeeplinkParamParseResponse Data { get; set; } //;
        }
        
        public enum DeeplinkType
        {
            
            None = 0,
            
            Meeting = 1,
        }
        
        [Serializable()]
        public class DeleteCheckboxMembersRequest
        {
            
            [JsonProperty("groupId")]
            public long GroupId { get; set; } //;
            
            [JsonProperty("deleteMembers")]
            public string[] DeleteMembers { get; set; } //;
        }
        
        [Serializable()]
        public class DeleteFileRequest
        {
            
            [JsonProperty("groupId")]
            public long GroupId { get; set; } //;
            
            [JsonProperty("fileName")]
            public string FileName { get; set; } //;
            
            [JsonProperty("directory-path")]
            public string DirectoryPath { get; set; } //;
        }
        
        [Serializable()]
        public class DeleteSmallTalkRequest
        {
            
            [JsonProperty("roomId")]
            public string RoomId { get; set; } //;
        }
        
        [Serializable()]
        public class DeleteTeamRequest
        {
            
            [JsonProperty("groupId")]
            public long GroupId { get; set; } //;
            
            [JsonProperty("teamId")]
            public long TeamId { get; set; } //;
        }
        
        [Serializable()]
        public class DeleteTeamSpaceRequest
        {
            
            [JsonProperty("groupId")]
            public long GroupId { get; set; } //;
            
            [JsonProperty("teamId")]
            public long TeamId { get; set; } //;
        }
        
        [Serializable()]
        public class DeleteUploadedFileRequest
        {
            
            [JsonProperty("path")]
            public string Path { get; set; } //;
            
            [JsonProperty("file")]
            public string File { get; set; } //;
        }
        
        [Serializable()]
        public class DeleteUploadedFileResponse
        {
            
            [JsonProperty("path")]
            public string Path { get; set; } //;
            
            [JsonProperty("file")]
            public string File { get; set; } //;
            
            [JsonProperty("serviceName")]
            public string ServiceName { get; set; } //;
        }
        
        [Serializable()]
        public class DeleteUploadedFileResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.DeleteUploadedFileResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class DeleteVoiceBoardPostRequest
        {
            
            [JsonProperty("boardSeq")]
            public long BoardSeq { get; set; } //;
            
            [JsonProperty("objectId")]
            public string ObjectId { get; set; } //;
        }
        
        [Serializable()]
        public class DeliveryCreditRequest
        {
            
            [JsonProperty("uuid")]
            public string Uuid { get; set; } //;
            
            [JsonProperty("action_type")]
            public int ActionType { get; set; } //;
            
            [JsonProperty("market_id")]
            public int MarketId { get; set; } //;
            
            [JsonProperty("order_id")]
            public string OrderId { get; set; } //;
            
            [JsonProperty("player_id")]
            public long PlayerId { get; set; } //;
            
            [JsonProperty("account_id")]
            public long AccountId { get; set; } //;
            
            [JsonProperty("market_pid")]
            public string MarketPid { get; set; } //;
            
            [JsonProperty("goods_id")]
            public int GoodsId { get; set; } //;
            
            [JsonProperty("amount")]
            public double Amount { get; set; } //;
            
            [JsonProperty("currency")]
            public string Currency { get; set; } //;
            
            [JsonProperty("transaction_id")]
            public string TransactionId { get; set; } //;
            
            [JsonProperty("quantity")]
            public int Quantity { get; set; } //;
        }
        
        [Serializable()]
        public class DeliveryCreditResponse
        {
            
            [JsonProperty("groupAssetEntities")]
            public Components.GroupAssetEntity[] GroupAssetEntities { get; set; } //;
        }
        
        [Serializable()]
        public class DeliveryCreditResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.DeliveryCreditResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class DepartmentInfo
        {
            
            [JsonProperty("companyCode")]
            public int CompanyCode { get; set; } //;
            
            [JsonProperty("companyName")]
            public string CompanyName { get; set; } //;
            
            [JsonProperty("deptCode")]
            public string DeptCode { get; set; } //;
            
            [JsonProperty("parentCode")]
            public string ParentCode { get; set; } //;
            
            [JsonProperty("indexCode")]
            public string IndexCode { get; set; } //;
            
            [JsonProperty("deptName")]
            public string DeptName { get; set; } //;
            
            [JsonProperty("deptEnglishName")]
            public string DeptEnglishName { get; set; } //;
            
            [JsonProperty("deptNickname")]
            public string DeptNickname { get; set; } //;
            
            [JsonProperty("deptDescription")]
            public string DeptDescription { get; set; } //;
            
            [JsonProperty("deptMailAddress")]
            public string DeptMailAddress { get; set; } //;
        }
        
        [Serializable()]
        public class DepartmentPayload
        {
            
            [JsonProperty("info")]
            public Components.DepartmentInfo Info { get; set; } //;
            
            [JsonProperty("subDepartments")]
            public Components.DepartmentPayload[] SubDepartments { get; set; } //;
            
            [JsonProperty("employees")]
            public Components.EmployeePayload[] Employees { get; set; } //;
        }
        
        [Serializable()]
        public class DepartmentPayloadIEnumerableResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.DepartmentPayload[] Data { get; set; } //;
        }
        
        public enum DeviceType
        {
            
            None = 0,
            
            C2VClient = 1,
            
            MessengerPc = 10,
            
            MessengerMobile = 11,
            
            Console = 20,
        }
        
        public enum Direction
        {
            
            DirectionNone = 0,
            
            Bilateral = 1,
            
            Incoming = 2,
            
            Outgoing = 3,
        }
        
        public enum DirectoryPathUserType
        {
            
            None = 0,
            
            Messenger = 1,
            
            VoiceBoard = 2,
            
            Profile = 3,
            
            Meeting = 4,
        }
        
        [Serializable()]
        public class DownloadFileRequest
        {
            
            [JsonProperty("path")]
            public string Path { get; set; } //;
            
            [JsonProperty("file")]
            public string File { get; set; } //;
        }
        
        [Serializable()]
        public class DownloadFileResponse
        {
            
            [JsonProperty("url")]
            public string Url { get; set; } //;
            
            [JsonProperty("path")]
            public string Path { get; set; } //;
            
            [JsonProperty("file")]
            public string File { get; set; } //;
            
            [JsonProperty("serviceName")]
            public string ServiceName { get; set; } //;
            
            [JsonProperty("expireTime")]
            public long ExpireTime { get; set; } //;
        }
        
        [Serializable()]
        public class DownloadFileResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.DownloadFileResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class EditGroupInfoRequest
        {
            
            [JsonProperty("groupId")]
            public long GroupId { get; set; } //;
            
            [JsonProperty("groupName")]
            public string GroupName { get; set; } //;
            
            [JsonProperty("mailAddress")]
            public string MailAddress { get; set; } //;
        }
        
        [Serializable()]
        public class EmailEntry
        {
            
            [JsonProperty("replacementContents")]
            public Components.ReplacementContent[] ReplacementContents { get; set; } //;
            
            [JsonProperty("toAddress")]
            public string ToAddress { get; set; } //;
        }
        
        [Serializable()]
        public class EmailSenderForm
        {
            
            [JsonProperty("groupId")]
            public long GroupId { get; set; } //;
            
            [JsonProperty("name")]
            public string Name { get; set; } //;
            
            [JsonProperty("identifyKey")]
            public string IdentifyKey { get; set; } //;
            
            [JsonProperty("emailAddress")]
            public string EmailAddress { get; set; } //;
        }
        
        [Serializable()]
        public class EmailTemplateResponse
        {
            
            [JsonProperty("templateName")]
            public string TemplateName { get; set; } //;
            
            [JsonProperty("templateData")]
            public string[] TemplateData { get; set; } //;
            
            [JsonProperty("html")]
            public string Html { get; set; } //;
            
            [JsonProperty("subject")]
            public string Subject { get; set; } //;
        }
        
        [Serializable()]
        public class EmailTemplateResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.EmailTemplateResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class EmployeeLevel
        {
            
            [JsonProperty("levelCode")]
            public int LevelCode { get; set; } //;
            
            [JsonProperty("levelName")]
            public string LevelName { get; set; } //;
            
            [JsonProperty("levelEnglishName")]
            public string LevelEnglishName { get; set; } //;
        }
        
        [Serializable()]
        public class EmployeePayload
        {
            
            [JsonProperty("accountID")]
            public long AccountId { get; set; } //;
            
            [JsonProperty("employeeNo")]
            public string EmployeeNo { get; set; } //;
            
            [JsonProperty("employeeName")]
            public string EmployeeName { get; set; } //;
            
            [JsonProperty("mailAddress")]
            public string MailAddress { get; set; } //;
            
            [JsonProperty("telNo")]
            public string TelNo { get; set; } //;
            
            [JsonProperty("genderCode")]
            public int GenderCode { get; set; } //;
            
            [JsonProperty("location")]
            public string Location { get; set; } //;
            
            [JsonProperty("task")]
            public string Task { get; set; } //;
            
            [JsonProperty("photoPath")]
            public string PhotoPath { get; set; } //;
            
            [JsonProperty("stateCode")]
            public int StateCode { get; set; } //;
            
            [JsonProperty("works")]
            public Components.WorkPayload[] Works { get; set; } //;
        }
        
        [Serializable()]
        public class EmployeePosition
        {
            
            [JsonProperty("positionCode")]
            public int PositionCode { get; set; } //;
            
            [JsonProperty("positionName")]
            public string PositionName { get; set; } //;
            
            [JsonProperty("positionEnglishName")]
            public string PositionEnglishName { get; set; } //;
        }
        
        [Serializable()]
        public class EnrollRequest
        {
            
            [JsonProperty("objectId")]
            public string ObjectId { get; set; } //;
            
            [JsonProperty("message")]
            public string Message { get; set; } //;
        }
        
        [Serializable()]
        public class EnrollVoiceBoardPostRequest
        {
            
            [JsonProperty("objectId")]
            public string ObjectId { get; set; } //;
            
            [JsonProperty("filePath")]
            public string FilePath { get; set; } //;
            
            [JsonProperty("fileName")]
            public string FileName { get; set; } //;
            
            [JsonProperty("directoryPath")]
            public string DirectoryPath { get; set; } //;
        }
        
        [Serializable()]
        public class ExtendEndRequest
        {
            
            [JsonProperty("meetingId")]
            public long MeetingId { get; set; } //;
            
            [JsonProperty("extendMinute")]
            public int ExtendMinute { get; set; } //;
            
            [JsonProperty("useAssetType")]
            public Components.GroupAssetType UseAssetType { get; set; } //;
        }
        
        [Serializable()]
        public class FileDownloadResponse
        {
            
            [JsonProperty("url")]
            public string Url { get; set; } //;
            
            [JsonProperty("fileName")]
            public string FileName { get; set; } //;
        }
        
        [Serializable()]
        public class FileDownloadResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.FileDownloadResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class FileDownloadUrlRequest
        {
            
            [JsonProperty("meetingId")]
            public long MeetingId { get; set; } //;
            
            [JsonProperty("fileName")]
            public string[] FileName { get; set; } //;
        }
        
        [Serializable()]
        public class FileDownloadUrlResponse
        {
            
            [JsonProperty("sttFileDownloadInfo")]
            public Components.SttFileDownloadInfo[] SttFileDownloadInfo { get; set; } //;
        }
        
        [Serializable()]
        public class FileDownloadUrlResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.FileDownloadUrlResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class FileToClient
        {
            
            [JsonProperty("fileName")]
            public string FileName { get; set; } //;
            
            [JsonProperty("size")]
            public long Size { get; set; } //;
            
            [JsonProperty("expireTime")]
            public long ExpireTime { get; set; } //;
        }
        
        [Serializable()]
        public class ForcedOutRequest
        {
            
            [JsonProperty("meetingId")]
            public long MeetingId { get; set; } //;
            
            [JsonProperty("forcedOutAccountId")]
            public long ForcedOutAccountId { get; set; } //;
        }
        
        [Serializable()]
        public class GetActivatedSpaceInfoRequest
        {
            
            [JsonProperty("groupId")]
            public long GroupId { get; set; } //;
        }
        
        [Serializable()]
        public class GetActivatedTeamSpaceInfoRequest
        {
            
            [JsonProperty("groupId")]
            public long GroupId { get; set; } //;
        }
        
        [Serializable()]
        public class GetActivatedTeamSpaceInfoResponse
        {
            
            [JsonProperty("groupName")]
            public string GroupName { get; set; } //;
            
            [JsonProperty("teams")]
            public Components.ActivatedSpaceTeamInfo[] Teams { get; set; } //;
            
            [JsonProperty("restSpaces")]
            public Components.RestSpace[] RestSpaces { get; set; } //;
        }
        
        [Serializable()]
        public class GetActivatedTeamSpaceInfoResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.GetActivatedTeamSpaceInfoResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class GetEventGroupNameRequest
        {
            
            [JsonProperty("email")]
            public string Email { get; set; } //;
        }
        
        [Serializable()]
        public class GetEventGroupNameResponse
        {
            
            [JsonProperty("groupName")]
            public string GroupName { get; set; } //;
        }
        
        [Serializable()]
        public class GetEventGroupNameResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.GetEventGroupNameResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class GetFileDownloadUrlRequest
        {
            
            [JsonProperty("groupId")]
            public long GroupId { get; set; } //;
            
            [JsonProperty("callbackKey")]
            public string CallbackKey { get; set; } //;
            
            [JsonProperty("fileName")]
            public string FileName { get; set; } //;
            
            [JsonProperty("directoryPathType")]
            public Components.DirectoryPathUserType DirectoryPathType { get; set; } //;
            
            [JsonProperty("path")]
            public string Path { get; set; } //;
        }
        
        [Serializable()]
        public class GetFileDownloadUrlResponse
        {
            
            [JsonProperty("downloadUrl")]
            public string DownloadUrl { get; set; } //;
            
            [JsonProperty("fileName")]
            public string FileName { get; set; } //;
            
            [JsonProperty("directoryPath")]
            public string DirectoryPath { get; set; } //;
            
            [JsonProperty("expireTime")]
            public long ExpireTime { get; set; } //;
        }
        
        [Serializable()]
        public class GetFileDownloadUrlResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.GetFileDownloadUrlResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class GetGroupResult
        {
            
            [JsonProperty("updateDateTime")]
            public string UpdateDateTime { get; set; } //;
            
            [JsonProperty("groupId")]
            public int GroupId { get; set; } //;
        }
        
        [Serializable()]
        public class GetGroupTeamMemberRequest
        {
            
            [JsonProperty("groupId")]
            public long GroupId { get; set; } //;
            
            [JsonProperty("teamId")]
            public long TeamId { get; set; } //;
            
            [JsonProperty("searchName")]
            public string SearchName { get; set; } //;
        }
        
        [Serializable()]
        public class GetInfoByTeamAttributeRequest
        {
            
            [JsonProperty("groupId")]
            public long GroupId { get; set; } //;
            
            [JsonProperty("teamId")]
            public long TeamId { get; set; } //;
            
            [JsonProperty("spaceId")]
            public string SpaceId { get; set; } //;
            
            [JsonProperty("isJoinAreaChat")]
            public bool IsJoinAreaChat { get; set; } //;
        }
        
        [Serializable()]
        public class GetInfoByTeamAttributeResponse
        {
            
            [JsonProperty("chatGroupId")]
            public string ChatGroupId { get; set; } //;
        }
        
        [Serializable()]
        public class GetInfoByTeamAttributeResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.GetInfoByTeamAttributeResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class GetMediaBandwidthResponse
        {
            
            [JsonProperty("serviceId")]
            public string ServiceId { get; set; } //;
            
            [JsonProperty("bandwidth")]
            public long Bandwidth { get; set; } //;
            
            [JsonProperty("upThreshold")]
            public int UpThreshold { get; set; } //;
            
            [JsonProperty("downThreshold")]
            public int DownThreshold { get; set; } //;
        }
        
        [Serializable()]
        public class GetMediaBandwidthResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.GetMediaBandwidthResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class GetMediaBandwidthStatusResponse
        {
            
            [JsonProperty("cid")]
            public string Cid { get; set; } //;
            
            [JsonProperty("limitbandwidth")]
            public long Limitbandwidth { get; set; } //;
            
            [JsonProperty("upthreshold")]
            public int Upthreshold { get; set; } //;
            
            [JsonProperty("downthreshold")]
            public int Downthreshold { get; set; } //;
            
            [JsonProperty("avgbandwidth")]
            public long Avgbandwidth { get; set; } //;
            
            [JsonProperty("usage")]
            public int Usage { get; set; } //;
            
            [JsonProperty("level")]
            public int Level { get; set; } //;
        }
        
        [Serializable()]
        public class GetMediaBandwidthStatusResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.GetMediaBandwidthStatusResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class GetMemberInfoByIdentifyKeyRequest
        {
            
            [JsonProperty("identifyKey")]
            public string IdentifyKey { get; set; } //;
        }
        
        [Serializable()]
        public class GetSpaceTemplateResponse
        {
            
            [JsonProperty("id")]
            public long Id { get; set; } //;
            
            [JsonProperty("spaceTemplateName")]
            public string SpaceTemplateName { get; set; } //;
            
            [JsonProperty("title")]
            public string Title { get; set; } //;
            
            [JsonProperty("description")]
            public string Description { get; set; } //;
            
            [JsonProperty("spaceType")]
            public int SpaceType { get; set; } //;
            
            [JsonProperty("spaceCode")]
            public string SpaceCode { get; set; } //;
            
            [JsonProperty("buildingId")]
            public int BuildingId { get; set; } //;
            
            [JsonProperty("imageRes")]
            public string ImageRes { get; set; } //;
        }
        
        [Serializable()]
        public class GetSpaceTemplateResponseListResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.GetSpaceTemplateResponse[] Data { get; set; } //;
        }
        
        [Serializable()]
        public class GetTeamInfoRequest
        {
            
            [JsonProperty("groupId")]
            public long GroupId { get; set; } //;
            
            [JsonProperty("teamId")]
            public long TeamId { get; set; } //;
        }
        
        [Serializable()]
        public class GetTeamInfoResponse
        {
            
            [JsonProperty("teamName")]
            public string TeamName { get; set; } //;
            
            [JsonProperty("parentTeamId")]
            public long ParentTeamId { get; set; } //;
            
            [JsonProperty("spaceId")]
            public string SpaceId { get; set; } //;
            
            [JsonProperty("templateName")]
            public string TemplateName { get; set; } //;
            
            [JsonProperty("totalCount")]
            public int TotalCount { get; set; } //;
        }
        
        [Serializable()]
        public class GetTeamInfoResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.GetTeamInfoResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class GetUploadedFileRequest
        {
            
            [JsonProperty("service-name")]
            public string ServiceName { get; set; } //;
            
            [JsonProperty("path")]
            public string Path { get; set; } //;
            
            [JsonProperty("file")]
            public string File { get; set; } //;
        }
        
        [Serializable()]
        public class GetUploadedFileResponseToClient
        {
            
            [JsonProperty("fileName")]
            public string FileName { get; set; } //;
            
            [JsonProperty("size")]
            public long Size { get; set; } //;
            
            [JsonProperty("expireTime")]
            public long ExpireTime { get; set; } //;
        }
        
        [Serializable()]
        public class GetUploadedFileResponseToClientResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.GetUploadedFileResponseToClient Data { get; set; } //;
        }
        
        [Serializable()]
        public class GetVoiceBoardRequest
        {
            
            [JsonProperty("objectId")]
            public string ObjectId { get; set; } //;
        }
        
        [Serializable()]
        public class Group
        {
            
            [JsonProperty("groupId")]
            public long GroupId { get; set; } //;
            
            [JsonProperty("groupName")]
            public string GroupName { get; set; } //;
            
            [JsonProperty("mailAddress")]
            public string MailAddress { get; set; } //;
            
            [JsonProperty("createUserId")]
            public string CreateUserId { get; set; } //;
            
            [JsonProperty("totalCount")]
            public int TotalCount { get; set; } //;
            
            [JsonProperty("teams")]
            public Components.Team[] Teams { get; set; } //;
        }
        
        [Serializable()]
        public class GroupAssetEntity
        {
            
            [JsonProperty("groupAssetType")]
            public Components.GroupAssetType GroupAssetType { get; set; } //;
            
            [JsonProperty("amount")]
            public int Amount { get; set; } //;
        }
        
        public enum GroupAssetType
        {
            
            AssetTypeNone = 0,
            
            AssetTypeCredit = 1,
            
            AssetTypeFreeCredit = 2,
        }
        
        [Serializable()]
        public class GroupCreateRequest
        {
            
            [JsonProperty("groupName")]
            public string GroupName { get; set; } //;
            
            [JsonProperty("mailAddress")]
            public string MailAddress { get; set; } //;
            
            [JsonProperty("createTeam")]
            public Components.CreateTeam CreateTeam { get; set; } //;
            
            [JsonProperty("createMember")]
            public Components.CreateMember CreateMember { get; set; } //;
        }
        
        [Serializable()]
        public class GroupCreateResponse
        {
            
            [JsonProperty("groupId")]
            public long GroupId { get; set; } //;
            
            [JsonProperty("teamId")]
            public long TeamId { get; set; } //;
            
            [JsonProperty("freeExperienceTicket")]
            public long FreeExperienceTicket { get; set; } //;
        }
        
        [Serializable()]
        public class GroupCreateResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.GroupCreateResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class GroupDeleteRequest
        {
            
            [JsonProperty("groupId")]
            public string GroupId { get; set; } //;
        }
        
        [Serializable()]
        public class GroupDismissMemberRequest
        {
            
            [JsonProperty("groupId")]
            public string GroupId { get; set; } //;
            
            [JsonProperty("leaveUsers")]
            public string[] LeaveUsers { get; set; } //;
            
            [JsonProperty("userId")]
            public string UserId { get; set; } //;
        }
        
        [Serializable()]
        public class GroupEditRequest
        {
            
            [JsonProperty("groupId")]
            public string GroupId { get; set; } //;
            
            [JsonProperty("updateUserId")]
            public string UpdateUserId { get; set; } //;
            
            [JsonProperty("groupName")]
            public string GroupName { get; set; } //;
            
            [JsonProperty("areaName")]
            public string AreaName { get; set; } //;
        }
        
        [Serializable()]
        public class GroupEditResponse
        {
            
            [JsonProperty("groupId")]
            public string GroupId { get; set; } //;
            
            [JsonProperty("updateUserId")]
            public string UpdateUserId { get; set; } //;
            
            [JsonProperty("groupName")]
            public string GroupName { get; set; } //;
            
            [JsonProperty("beforeName")]
            public string BeforeName { get; set; } //;
            
            [JsonProperty("areaName")]
            public string AreaName { get; set; } //;
            
            [JsonProperty("beforeAreaName")]
            public string BeforeAreaName { get; set; } //;
        }
        
        [Serializable()]
        public class GroupEditResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.GroupEditResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class GroupInfoRequest
        {
            
            [JsonProperty("groupId")]
            public string GroupId { get; set; } //;
            
            [JsonProperty("messageId")]
            public long MessageId { get; set; } //;
            
            [JsonProperty("pageNum")]
            public int PageNum { get; set; } //;
            
            [JsonProperty("pageSize")]
            public int PageSize { get; set; } //;
            
            [JsonProperty("sort")]
            public string Sort { get; set; } //;
            
            [JsonProperty("rewind")]
            public string Rewind { get; set; } //;
        }
        
        [Serializable()]
        public class GroupInviteMemberRequest
        {
            
            [JsonProperty("groupId")]
            public string GroupId { get; set; } //;
            
            [JsonProperty("users")]
            public Components.InviteUser[] Users { get; set; } //;
        }
        
        [Serializable()]
        public class GroupInviteMemberResponse
        {
            
            [JsonProperty("groupId")]
            public string GroupId { get; set; } //;
            
            [JsonProperty("users")]
            public Components.JsonNode[] Users { get; set; } //;
            
            [JsonProperty("groupCount")]
            public int GroupCount { get; set; } //;
        }
        
        [Serializable()]
        public class GroupInviteMemberResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.GroupInviteMemberResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class GroupListRequest
        {
            
            [JsonProperty("userId")]
            public string UserId { get; set; } //;
            
            [JsonProperty("pageNum")]
            public int PageNum { get; set; } //;
            
            [JsonProperty("pageSize")]
            public int PageSize { get; set; } //;
            
            [JsonProperty("sort")]
            public string Sort { get; set; } //;
            
            [JsonProperty("groupType")]
            public int GroupType { get; set; } //;
            
            [JsonProperty("groupName")]
            public string GroupName { get; set; } //;
            
            [JsonProperty("serviceType")]
            public int ServiceType { get; set; } //;
        }
        
        [Serializable()]
        public class GroupListResponse
        {
            
            [JsonProperty("pageNum")]
            public int PageNum { get; set; } //;
            
            [JsonProperty("pageSize")]
            public int PageSize { get; set; } //;
            
            [JsonProperty("sort")]
            public string Sort { get; set; } //;
            
            [JsonProperty("userId")]
            public string UserId { get; set; } //;
            
            [JsonProperty("serviceType")]
            public int ServiceType { get; set; } //;
            
            [JsonProperty("groupList")]
            public Components.JsonNode[] GroupList { get; set; } //;
            
            [JsonProperty("totalCount")]
            public int TotalCount { get; set; } //;
        }
        
        [Serializable()]
        public class GroupListResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.GroupListResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class GroupMemberInfoEditRequest
        {
            
            [JsonProperty("groupId")]
            public string GroupId { get; set; } //;
            
            [JsonProperty("userId")]
            public string UserId { get; set; } //;
            
            [JsonProperty("userRole")]
            public int UserRole { get; set; } //;
            
            [JsonProperty("pushType")]
            public int PushType { get; set; } //;
        }
        
        [Serializable()]
        public class GroupMemberInfoEditResponse
        {
            
            [JsonProperty("groupId")]
            public string GroupId { get; set; } //;
            
            [JsonProperty("userId")]
            public string UserId { get; set; } //;
            
            [JsonProperty("userRole")]
            public int UserRole { get; set; } //;
            
            [JsonProperty("beforeRole")]
            public int BeforeRole { get; set; } //;
            
            [JsonProperty("pushType")]
            public int PushType { get; set; } //;
            
            [JsonProperty("beforePushType")]
            public int BeforePushType { get; set; } //;
        }
        
        [Serializable()]
        public class GroupMemberInfoEditResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.GroupMemberInfoEditResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class GroupResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.Group Data { get; set; } //;
        }
        
        [Serializable()]
        public class GuestRequest
        {
            
            [JsonProperty("meetingCode")]
            public string MeetingCode { get; set; } //;
        }
        
        [Serializable()]
        public class GuestResponse
        {
            
            [JsonProperty("meetingId")]
            public long MeetingId { get; set; } //;
        }
        
        [Serializable()]
        public class GuestResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.GuestResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class Int32NullableResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public int Data { get; set; } //;
        }
        
        [Serializable()]
        public class Int32ResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public int Data { get; set; } //;
        }
        
        [Serializable()]
        public class InviteCancelRequest
        {
            
            [JsonProperty("meetingId")]
            public long MeetingId { get; set; } //;
            
            [JsonProperty("cancelAccountId")]
            public long CancelAccountId { get; set; } //;
        }
        
        [Serializable()]
        public class InviteCancelResponse
        {
        }
        
        [Serializable()]
        public class InviteCancelResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.InviteCancelResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class InviteRequest
        {
            
            [JsonProperty("meetingId")]
            public long MeetingId { get; set; } //;
            
            [JsonProperty("meetingMembers")]
            public Components.MeetingMemberEntity[] MeetingMembers { get; set; } //;
        }
        
        [Serializable()]
        public class InviteResponse
        {
        }
        
        [Serializable()]
        public class InviteResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.InviteResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class InviteUser
        {
            
            [JsonProperty("userId")]
            public string UserId { get; set; } //;
            
            [JsonProperty("userRole")]
            public int UserRole { get; set; } //;
            
            [JsonProperty("hivePlayerId")]
            public long HivePlayerId { get; set; } //;
        }
        
        [Serializable()]
        public class JoinBuildingRepresentSpaceChatGroupRequest
        {
            
            [JsonProperty("buildingId")]
            public int BuildingId { get; set; } //;
        }
        
        [Serializable()]
        public class JoinBuildingRepresentSpaceChatGroupResponse
        {
            
            [JsonProperty("chatGroupId")]
            public string ChatGroupId { get; set; } //;
        }
        
        [Serializable()]
        public class JoinBuildingRepresentSpaceChatGroupResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.JoinBuildingRepresentSpaceChatGroupResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class JsonNode
        {
            
            [JsonProperty("options")]
            public Components.JsonNodeOptions Options { get; set; } //;
            
            [JsonProperty("parent")]
            public Components.JsonNode Parent { get; set; } //;
            
            [JsonProperty("root")]
            public Components.JsonNode Root { get; set; } //;
        }
        
        [Serializable()]
        public class JsonNodeOptions
        {
            
            [JsonProperty("propertyNameCaseInsensitive")]
            public bool PropertyNameCaseInsensitive { get; set; } //;
        }
        
        [Serializable()]
        public class JsonObjectResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public object Data { get; set; } //;
        }
        
        [Serializable()]
        public class JsonValue
        {
            
            [JsonProperty("options")]
            public Components.JsonNodeOptions Options { get; set; } //;
            
            [JsonProperty("parent")]
            public Components.JsonNode Parent { get; set; } //;
            
            [JsonProperty("root")]
            public Components.JsonNode Root { get; set; } //;
        }
        
        [Serializable()]
        public class JsonValueResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.JsonValue Data { get; set; } //;
        }
        
        [Serializable()]
        public class Links
        {
            
            [JsonProperty("self")]
            public string Self { get; set; } //;
            
            [JsonProperty("related")]
            public string Related { get; set; } //;
        }
        
        [Serializable()]
        public class ListRequest
        {
            
            [JsonProperty("objectId")]
            public string ObjectId { get; set; } //;
            
            [JsonProperty("currDateTime")]
            public string CurrDateTime { get; set; } //;
        }
        
        [Serializable()]
        public class LoginConsoleResponse
        {
            
            [JsonProperty("groupId")]
            public long GroupId { get; set; } //;
            
            [JsonProperty("teamId")]
            public long TeamId { get; set; } //;
            
            [JsonProperty("authorityCode")]
            public int AuthorityCode { get; set; } //;
            
            [JsonProperty("isGroupNameEvent")]
            public string IsGroupNameEvent { get; set; } //;
        }
        
        [Serializable()]
        public class LoginConsoleResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.LoginConsoleResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class LoginRequest
        {
            
            [JsonProperty("serviceId")]
            public string ServiceId { get; set; } //;
        }
        
        [Serializable()]
        public class LoginResponse
        {
            
            [JsonProperty("groupResults")]
            public Components.GetGroupResult[] GroupResults { get; set; } //;
            
            [JsonProperty("bannerAd")]
            public Components.BannerAd BannerAd { get; set; } //;
        }
        
        [Serializable()]
        public class LoginResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.LoginResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class LoginShareOfficeRequest
        {
            
            [JsonProperty("deviceType")]
            public Components.DeviceType DeviceType { get; set; } //;
        }
        
        [Serializable()]
        public class LoginShareOfficeResponse
        {
            
            [JsonProperty("organizationChart")]
            public Components.OrganizationChartResponse OrganizationChart { get; set; } //;
            
            [JsonProperty("availableMeetingTemplate")]
            public Components.MeetingTemplate[] AvailableMeetingTemplate { get; set; } //;
            
            [JsonProperty("messengerBannerAd")]
            public Components.MessengerBannerAd[] MessengerBannerAd { get; set; } //;
        }
        
        [Serializable()]
        public class LoginShareOfficeResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.LoginShareOfficeResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class ManagerMyInfoEntity
        {
            
            [JsonProperty("photoPath")]
            public string PhotoPath { get; set; } //;
            
            [JsonProperty("memberName")]
            public string MemberName { get; set; } //;
            
            [JsonProperty("mailAddress")]
            public string MailAddress { get; set; } //;
            
            [JsonProperty("identifyKey")]
            public string IdentifyKey { get; set; } //;
            
            [JsonProperty("imageUrl")]
            public string ImageUrl { get; set; } //;
        }
        
        [Serializable()]
        public class ManagerMyInfoEntityResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.ManagerMyInfoEntity Data { get; set; } //;
        }
        
        [Serializable()]
        public class ManagerMyInfoRequest
        {
            
            [JsonProperty("groupId")]
            public long GroupId { get; set; } //;
        }
        
        [Serializable()]
        public class ManufactureCreateSmallTalkResponse
        {
            
            [JsonProperty("serviceName")]
            public string ServiceName { get; set; } //;
            
            [JsonProperty("roomId")]
            public string RoomId { get; set; } //;
            
            [JsonProperty("mediaId")]
            public string MediaId { get; set; } //;
            
            [JsonProperty("mediaUrl")]
            public string MediaUrl { get; set; } //;
            
            [JsonProperty("config")]
            public Components.Config Config { get; set; } //;
            
            [JsonProperty("stunServer")]
            public Components.ManufactureStunServer StunServer { get; set; } //;
            
            [JsonProperty("turnServer")]
            public Components.ManufactureTurnServer TurnServer { get; set; } //;
        }
        
        [Serializable()]
        public class ManufactureCreateSmallTalkResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.ManufactureCreateSmallTalkResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class ManufactureGroupInfoResponse
        {
            
            [JsonProperty("groupId")]
            public string GroupId { get; set; } //;
            
            [JsonProperty("groupName")]
            public string GroupName { get; set; } //;
            
            [JsonProperty("groupType")]
            public int GroupType { get; set; } //;
            
            [JsonProperty("createUserId")]
            public string CreateUserId { get; set; } //;
            
            [JsonProperty("createDatetime")]
            public long CreateDatetime { get; set; } //;
            
            [JsonProperty("updateDatetime")]
            public long UpdateDatetime { get; set; } //;
            
            [JsonProperty("message")]
            public object Message { get; set; } //;
            
            [JsonProperty("lastRecords")]
            public Components.JsonNode[] LastRecords { get; set; } //;
            
            [JsonProperty("serviceType")]
            public int ServiceType { get; set; } //;
            
            [JsonProperty("areaName")]
            public string AreaName { get; set; } //;
            
            [JsonProperty("groupCount")]
            public int GroupCount { get; set; } //;
            
            [JsonProperty("groupActions")]
            public Components.JsonNode[] GroupActions { get; set; } //;
            
            [JsonProperty("sort")]
            public string Sort { get; set; } //;
            
            [JsonProperty("rewind")]
            public string Rewind { get; set; } //;
            
            [JsonProperty("messageId")]
            public long MessageId { get; set; } //;
        }
        
        [Serializable()]
        public class ManufactureGroupInfoResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.ManufactureGroupInfoResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class ManufactureStunServer
        {
            
            [JsonProperty("url")]
            public string Url { get; set; } //;
        }
        
        [Serializable()]
        public class ManufactureTurnServer
        {
            
            [JsonProperty("url")]
            public string Url { get; set; } //;
            
            [JsonProperty("account")]
            public string Account { get; set; } //;
            
            [JsonProperty("password")]
            public string Password { get; set; } //;
        }
        
        [Serializable()]
        public class MeetingEntity
        {
            
            [JsonProperty("meetingId")]
            public long MeetingId { get; set; } //;
            
            [JsonProperty("meetingCode")]
            public string MeetingCode { get; set; } //;
            
            [JsonProperty("channelId")]
            public string ChannelId { get; set; } //;
            
            [JsonProperty("fieldId")]
            public long FieldId { get; set; } //;
            
            [JsonProperty("companyCode")]
            public int CompanyCode { get; set; } //;
            
            [JsonProperty("meetingName")]
            public string MeetingName { get; set; } //;
            
            [JsonProperty("meetingType")]
            public Components.MeetingType MeetingType { get; set; } //;
            
            [JsonProperty("templateId")]
            public long TemplateId { get; set; } //;
            
            [JsonProperty("maxUsersLimit")]
            public int MaxUsersLimit { get; set; } //;
            
            [JsonProperty("meetingDescription")]
            public string MeetingDescription { get; set; } //;
            
            [JsonProperty("meetingMembers")]
            public Components.MeetingMemberEntity[] MeetingMembers { get; set; } //;
            
            [JsonProperty("startDateTime")]
            public System.DateTime StartDateTime { get; set; } //;
            
            [JsonProperty("endDateTime")]
            public System.DateTime EndDateTime { get; set; } //;
            
            [JsonProperty("updateDateTime")]
            public System.DateTime UpdateDateTime { get; set; } //;
            
            [JsonProperty("cancelYn")]
            public string CancelYn { get; set; } //;
            
            [JsonProperty("chatNoteYn")]
            public string ChatNoteYn { get; set; } //;
            
            [JsonProperty("voiceRecordYn")]
            public string VoiceRecordYn { get; set; } //;
            
            [JsonProperty("meetingNoteYn")]
            public string MeetingNoteYn { get; set; } //;
            
            [JsonProperty("meetingStatus")]
            public Components.MeetingStatus MeetingStatus { get; set; } //;
            
            [JsonProperty("publicYn")]
            public string PublicYn { get; set; } //;
        }
        
        [Serializable()]
        public class MeetingEntityIEnumerableResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.MeetingEntity[] Data { get; set; } //;
        }
        
        [Serializable()]
        public class MeetingEntityResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.MeetingEntity Data { get; set; } //;
        }
        
        [Serializable()]
        public class MeetingIdRequest
        {
            
            [JsonProperty("meetingId")]
            public long MeetingId { get; set; } //;
        }
        
        [Serializable()]
        public class MeetingMemberEntity
        {
            
            [JsonProperty("accountId")]
            public long AccountId { get; set; } //;
            
            [JsonProperty("memberType")]
            public Components.MemberType MemberType { get; set; } //;
            
            [JsonProperty("attendanceCode")]
            public Components.AttendanceCode AttendanceCode { get; set; } //;
            
            [JsonProperty("authorityCode")]
            public Components.AuthorityCode AuthorityCode { get; set; } //;
            
            [JsonProperty("isEnter")]
            public bool IsEnter { get; set; } //;
            
            [JsonProperty("memberName")]
            public string MemberName { get; set; } //;
        }
        
        [Serializable()]
        public class MeetingNullResponse
        {
        }
        
        [Serializable()]
        public class MeetingNullResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.MeetingNullResponse Data { get; set; } //;
        }
        
        public enum MeetingStatus
        {
            
            MeetingStatusNone = 0,
            
            MeetingBeforeStart = 1,
            
            MeetingReadyTime = 2,
            
            MeetingOngoing = 3,
            
            MeetingPassed = 4,
            
            MeetingExpired = 5,
            
            MeetingCancelAfterDelete = 6,
        }
        
        [Serializable()]
        public class MeetingTemplate
        {
            
            [JsonProperty("meetingTemplateId")]
            public long MeetingTemplateId { get; set; } //;
            
            [JsonProperty("maxUserLimit")]
            public int MaxUserLimit { get; set; } //;
        }
        
        public enum MeetingType
        {
            
            MeetingTypeNone = 0,
            
            Space1 = 1,
            
            Space2 = 2,
            
            Space3 = 3,
            
            Round4 = 4,
            
            Round8 = 5,
            
            Round12 = 6,
            
            Round20 = 7,
            
            Report = 8,
            
            Lecture = 9,
        }
        
        [Serializable()]
        public class Member
        {
            
            [JsonProperty("accountId")]
            public long AccountId { get; set; } //;
            
            [JsonProperty("identifyKey")]
            public string IdentifyKey { get; set; } //;
            
            [JsonProperty("teamId")]
            public long TeamId { get; set; } //;
            
            [JsonProperty("memberName")]
            public string MemberName { get; set; } //;
            
            [JsonProperty("photoPath")]
            public string PhotoPath { get; set; } //;
            
            [JsonProperty("telNo")]
            public string TelNo { get; set; } //;
            
            [JsonProperty("mailAddress")]
            public string MailAddress { get; set; } //;
            
            [JsonProperty("level")]
            public string Level { get; set; } //;
            
            [JsonProperty("position")]
            public string Position { get; set; } //;
            
            [JsonProperty("task")]
            public string Task { get; set; } //;
            
            [JsonProperty("isCertification")]
            public bool IsCertification { get; set; } //;
        }
        
        [Serializable()]
        public class MemberEntity
        {
            
            [JsonProperty("accountId")]
            public long AccountId { get; set; } //;
            
            [JsonProperty("identifyKey")]
            public string IdentifyKey { get; set; } //;
            
            [JsonProperty("groupId")]
            public long GroupId { get; set; } //;
            
            [JsonProperty("teamId")]
            public long TeamId { get; set; } //;
            
            [JsonProperty("memberName")]
            public string MemberName { get; set; } //;
            
            [JsonProperty("levelName")]
            public string LevelName { get; set; } //;
            
            [JsonProperty("positionName")]
            public string PositionName { get; set; } //;
            
            [JsonProperty("mailAddress")]
            public string MailAddress { get; set; } //;
            
            [JsonProperty("telNo")]
            public string TelNo { get; set; } //;
            
            [JsonProperty("fileId")]
            public long FileId { get; set; } //;
            
            [JsonProperty("fileName")]
            public string FileName { get; set; } //;
            
            [JsonProperty("directoryPath")]
            public string DirectoryPath { get; set; } //;
            
            [JsonProperty("photoPath")]
            public string PhotoPath { get; set; } //;
            
            [JsonProperty("task")]
            public string Task { get; set; } //;
            
            [JsonProperty("authorityCode")]
            public int AuthorityCode { get; set; } //;
            
            [JsonProperty("createDateTime")]
            public System.DateTime CreateDateTime { get; set; } //;
            
            [JsonProperty("teamName")]
            public string TeamName { get; set; } //;
        }
        
        [Serializable()]
        public class MemberEntityIEnumerableResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.MemberEntity[] Data { get; set; } //;
        }
        
        [Serializable()]
        public class MemberEntityResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.MemberEntity Data { get; set; } //;
        }
        
        [Serializable()]
        public class MemberListPageRequest
        {
            
            [JsonProperty("groupId")]
            public long GroupId { get; set; } //;
            
            [JsonProperty("pageNo")]
            public int PageNo { get; set; } //;
            
            [JsonProperty("sortType")]
            public string SortType { get; set; } //;
            
            [JsonProperty("limit")]
            public int Limit { get; set; } //;
            
            [JsonProperty("searchType")]
            public string SearchType { get; set; } //;
            
            [JsonProperty("searchValue")]
            public string SearchValue { get; set; } //;
        }
        
        [Serializable()]
        public class MemberListResponse
        {
            
            [JsonProperty("totalCount")]
            public int TotalCount { get; set; } //;
            
            [JsonProperty("members")]
            public Components.ResponseMemberEntity[] Members { get; set; } //;
        }
        
        [Serializable()]
        public class MemberListResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.MemberListResponse Data { get; set; } //;
        }
        
        public enum MemberType
        {
            
            MemberTypeNone = 0,
            
            CompanyEmployee = 1,
            
            OutsideParticipant = 2,
        }
        
        [Serializable()]
        public class MembershipInfo
        {
            
            [JsonProperty("id")]
            public string Id { get; set; } //;
            
            [JsonProperty("type")]
            public string Type { get; set; } //;
            
            [JsonProperty("name")]
            public string Name { get; set; } //;
            
            [JsonProperty("role")]
            public string Role { get; set; } //;
        }
        
        [Serializable()]
        public class MessengerBannerAd
        {
            
            [JsonProperty("imagePath")]
            public string ImagePath { get; set; } //;
            
            [JsonProperty("redirectUrl")]
            public string RedirectUrl { get; set; } //;
        }
        
        [Serializable()]
        public class MoveGroupTeamSpaceRequest
        {
            
            [JsonProperty("groupId")]
            public long GroupId { get; set; } //;
            
            [JsonProperty("teamId")]
            public long TeamId { get; set; } //;
        }
        
        [Serializable()]
        public class MoveGroupTeamSpaceResonse
        {
            
            [JsonProperty("groupId")]
            public long GroupId { get; set; } //;
            
            [JsonProperty("groupName")]
            public string GroupName { get; set; } //;
            
            [JsonProperty("teamId")]
            public long TeamId { get; set; } //;
            
            [JsonProperty("teamName")]
            public string TeamName { get; set; } //;
            
            [JsonProperty("chatGroupId")]
            public string ChatGroupId { get; set; } //;
        }
        
        [Serializable()]
        public class MoveGroupTeamSpaceResonseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.MoveGroupTeamSpaceResonse Data { get; set; } //;
        }
        
        [Serializable()]
        public class MyListRequest
        {
            
            [JsonProperty("startDateTime")]
            public System.DateTime StartDateTime { get; set; } //;
            
            [JsonProperty("endDateTime")]
            public System.DateTime EndDateTime { get; set; } //;
        }
        
        public enum OfficeHttpResultCode
        {
            
            None = 0,
            
            Success = 200,
            
            TokenExpired = 419,
            
            Fail = 500,
            
            DBError = 1000,
            
            DbException = 1001,
            
            DbJsonError = 1002,
            
            LoginMismatchEmployeenoAccountid = 1050,
            
            MismatchAccountId = 1051,
            
            FailGetGroupId = 1052,
            
            NotDefinedGroupType = 1101,
            
            NotDefinedServiceType = 1102,
            
            NotDefinedUserRole = 1103,
            
            CannotExceedDefineValue = 1151,
            
            NotExistVoiceBoardPost = 1152,
            
            CannotInsertSameValue = 1153,
            
            TooLongMessageLength = 1201,
            
            DeeplinkInvalidType = 1301,
            
            DeeplinkInvalidValue = 1302,
            
            NotExistGroup = 3000,
            
            NotExistTeam = 3001,
            
            NotExistTeamMember = 3002,
            
            MemberExist = 3003,
            
            DuplicatedTeamName = 3004,
            
            TeamCreateFail = 3005,
            
            NotExistMember = 3006,
            
            NotJoinAnyGroup = 3007,
            
            NotMatchGroupId = 3008,
            
            NotMatchTeamId = 3009,
            
            FailUpdateTeam = 3010,
            
            EmptyMemberResult = 3011,
            
            NotGroupManager = 3012,
            
            FailUpdateMemberTeam = 3013,
            
            DuplicatedGroupName = 3014,
            
            ExistMember = 3015,
            
            FailCreateGroup = 3016,
            
            InvalidTemplateId = 3017,
            
            FailGetTeamData = 3018,
            
            FailGetGroupSpaceData = 3019,
            
            FailGetManager = 3020,
            
            CannotDeleteManager = 3021,
            
            FailInsertUnsignMember = 3022,
            
            FailGetMemberManagerMyInfo = 3023,
            
            FailGetTeamSpaceData = 3024,
            
            AlreadyExistAccountId = 3025,
            
            FailGetGroup = 3026,
            
            CannotExceedMemberCountValue = 3027,
            
            NotExistMemberIdentifyKey = 3028,
            
            FailGetMemberProfileResult = 3029,
            
            FailFileStorageService = 3030,
            
            FailCreateWhiteBoard = 3031,
            
            FailUploadProfileImage = 3032,
            
            NotContainsRestSpaceId = 3033,
            
            InvalidMoveTeam = 3034,
            
            FailWarpBuildingRepresentSpace = 3035,
            
            DuplicateMemberName = 3036,
            
            FailCreateFileStorageDirectory = 3037,
            
            FailJoinTeamChat = 3038,
            
            GetTeamChatGroupId = 3039,
            
            FailGetGroupAreaGroupId = 3040,
            
            ContainsForbiddenWord = 3041,
            
            FailWarpUser = 3042,
            
            CannotMoveUndefinedTeam = 3043,
            
            InvalidAuthenticationCode = 3044,
            
            AlreadyUsingIdentifyCode = 3045,
            
            CannotEmptyTeamIdAndSpaceId = 3046,
            
            FailGetMemberCount = 3047,
            
            EventAlredyUsed = 3210,
            
            EventFirstSuccess = 3211,
            
            EventWrongEmail = 3212,
            
            EventUnknownError = 3213,
            
            DuplicateFileName = 4000,
            
            CreditIsNotEnough = 5000,
            
            CreditDataIsWrong = 5001,
            
            ShopGoodsNotExists = 5002,
            
            MeetingAlreadyInviteUser = 6000,
            
            MeetingNotExists = 6001,
            
            MeetingNotExistsWaitList = 6002,
            
            MeetingEnd = 6003,
            
            MeetingNotInMeeting = 6004,
            
            MeetingNotExistsMember = 6005,
            
            MeetingOfficeAuthenticatedUser = 6006,
            
            MeetingCreateGroupApiFail = 6007,
            
            MeetingCreateMeetingApiFail = 6008,
            
            MeetingCannotChangeOrganizer = 6009,
            
            MeetingBandwidthLevel4 = 6010,
            
            MeetingNotOrganizer = 6011,
            
            MeetingAlreadyCancel = 6012,
            
            MeetingNotExistsCache = 6013,
            
            MeetingNotExistsSttFile = 6014,
            
            MeetingLogFail = 6015,
            
            MeetingInvalidRequestData = 6016,
            
            MeetingClearRoomFail = 6017,
            
            MeetingAttendanceCancelFail = 6100,
            
            MeetingGuestSameGroup = 6200,
            
            MeetingGuestInvalidMeetingCode = 6201,
            
            MeetingGuestInvalidTime = 6202,
            
            MeetingAlreadyEnd = 6203,
            
            MeetingOverUserCount = 6204,
            
            MeetingAssetNotEnough = 6300,
            
            ConfigIsNotExists = 8000,
            
            CommAreaLeave = 10000,
            
            CommAreaDelete = 10001,
            
            CommMediaMeetingsCreateFail = 10100,
            
            CommSttFail = 10200,
            
            InfraCreateInstantFieldFail = 11000,
            
            InfraWarpFail = 11001,
            
            FailReplyChatGPTMessage = 15000,
            
            GroupServerError = 400,
        }
        
        [Serializable()]
        public class OrganizationChartRequest
        {
            
            [JsonProperty("groupId")]
            public long GroupId { get; set; } //;
        }
        
        [Serializable()]
        public class OrganizationChartResponse
        {
            
            [JsonProperty("group")]
            public string Group { get; set; } //;
        }
        
        [Serializable()]
        public class OrganizationChartResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.OrganizationChartResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class OrganizationGroupInfoRequest
        {
            
            [JsonProperty("groupId")]
            public long GroupId { get; set; } //;
        }
        
        [Serializable()]
        public class OrganizationGroupInfoResponse
        {
            
            [JsonProperty("groupName")]
            public string GroupName { get; set; } //;
            
            [JsonProperty("mailAddress")]
            public string MailAddress { get; set; } //;
            
            [JsonProperty("groupKey")]
            public string GroupKey { get; set; } //;
            
            [JsonProperty("createUserId")]
            public string CreateUserId { get; set; } //;
        }
        
        [Serializable()]
        public class OrganizationGroupInfoResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.OrganizationGroupInfoResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class ParticularGroupInfoRequest
        {
            
            [JsonProperty("groupId")]
            public string GroupId { get; set; } //;
            
            [JsonProperty("pageNum")]
            public int PageNum { get; set; } //;
            
            [JsonProperty("pageSize")]
            public int PageSize { get; set; } //;
        }
        
        [Serializable()]
        public class ParticularGroupInfoResponse
        {
            
            [JsonProperty("groupId")]
            public string GroupId { get; set; } //;
            
            [JsonProperty("groupName")]
            public string GroupName { get; set; } //;
            
            [JsonProperty("groupType")]
            public int GroupType { get; set; } //;
            
            [JsonProperty("createUserId")]
            public string CreateUserId { get; set; } //;
            
            [JsonProperty("createDatetime")]
            public long CreateDatetime { get; set; } //;
            
            [JsonProperty("updateDatetime")]
            public long UpdateDatetime { get; set; } //;
            
            [JsonProperty("message")]
            public object Message { get; set; } //;
            
            [JsonProperty("lastRecords")]
            public Components.JsonNode[] LastRecords { get; set; } //;
            
            [JsonProperty("serviceType")]
            public int ServiceType { get; set; } //;
            
            [JsonProperty("areaName")]
            public string AreaName { get; set; } //;
            
            [JsonProperty("groupCount")]
            public int GroupCount { get; set; } //;
            
            [JsonProperty("users")]
            public Components.JsonNode[] Users { get; set; } //;
        }
        
        [Serializable()]
        public class ParticularGroupInfoResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.ParticularGroupInfoResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class PermissionsPolicy
        {
            
            [JsonProperty("collaborationToolsStartAccess")]
            public string CollaborationToolsStartAccess { get; set; } //;
            
            [JsonProperty("copyAccess")]
            public string CopyAccess { get; set; } //;
            
            [JsonProperty("sharingAccess")]
            public string SharingAccess { get; set; } //;
        }
        
        [Serializable()]
        public class Policy
        {
            
            [JsonProperty("permissionsPolicy")]
            public Components.PermissionsPolicy PermissionsPolicy { get; set; } //;
            
            [JsonProperty("sharingPolicy")]
            public Components.SharingPolicy SharingPolicy { get; set; } //;
        }
        
        [Serializable()]
        public class ProfileImageRollbackRequest
        {
            
            [JsonProperty("fileName")]
            public string FileName { get; set; } //;
            
            [JsonProperty("groupId")]
            public long GroupId { get; set; } //;
        }
        
        [Serializable()]
        public class ProjectInfo
        {
            
            [JsonProperty("id")]
            public string Id { get; set; } //;
            
            [JsonProperty("type")]
            public string Type { get; set; } //;
        }
        
        [Serializable()]
        public class ProjectResponseInfo
        {
            
            [JsonProperty("id")]
            public string Id { get; set; } //;
            
            [JsonProperty("name")]
            public string Name { get; set; } //;
            
            [JsonProperty("type")]
            public string Type { get; set; } //;
        }
        
        [Serializable()]
        public class RecommendVoiceBoardPostRequest
        {
            
            [JsonProperty("boardSeq")]
            public long BoardSeq { get; set; } //;
        }
        
        [Serializable()]
        public class RecordUsageRequest
        {
            
            [JsonProperty("meetingId")]
            public long MeetingId { get; set; } //;
        }
        
        [Serializable()]
        public class RecordUsageResponse
        {
            
            [JsonProperty("activeDurationSecs")]
            public int ActiveDurationSecs { get; set; } //;
        }
        
        [Serializable()]
        public class RecordUsageResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.RecordUsageResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class RegisterMemberRequest
        {
            
            [JsonProperty("identifyKey")]
            public string IdentifyKey { get; set; } //;
        }
        
        [Serializable()]
        public class RegisterUnsignedMemberRequest
        {
            
            [JsonProperty("groupId")]
            public long GroupId { get; set; } //;
            
            [JsonProperty("teamId")]
            public long TeamId { get; set; } //;
            
            [JsonProperty("memberName")]
            public string MemberName { get; set; } //;
            
            [JsonProperty("levelName")]
            public string LevelName { get; set; } //;
            
            [JsonProperty("positionName")]
            public string PositionName { get; set; } //;
            
            [JsonProperty("mailAddress")]
            public string MailAddress { get; set; } //;
            
            [JsonProperty("telNo")]
            public string TelNo { get; set; } //;
            
            [JsonProperty("task")]
            public string Task { get; set; } //;
            
            [JsonProperty("photoPath")]
            public string PhotoPath { get; set; } //;
        }
        
        [Serializable()]
        public class RegisterUnsignedMemberResponse
        {
            
            [JsonProperty("identifyKey")]
            public string IdentifyKey { get; set; } //;
            
            [JsonProperty("memberName")]
            public string MemberName { get; set; } //;
        }
        
        [Serializable()]
        public class RegisterUnsignedMemberResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.RegisterUnsignedMemberResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class ReplacementContent
        {
            
            [JsonProperty("key")]
            public string Key { get; set; } //;
            
            [JsonProperty("value")]
            public string Value { get; set; } //;
        }
        
        [Serializable()]
        public class ReservationChangeRequest
        {
            
            [JsonProperty("meeting")]
            public Components.MeetingEntity Meeting { get; set; } //;
        }
        
        [Serializable()]
        public class ReservationChangeResponse
        {
        }
        
        [Serializable()]
        public class ReservationChangeResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.ReservationChangeResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class ReservationRequest
        {
            
            [JsonProperty("meeting")]
            public Components.MeetingEntity Meeting { get; set; } //;
            
            [JsonProperty("useAssetType")]
            public Components.GroupAssetType UseAssetType { get; set; } //;
            
            [JsonProperty("messengerChatGroupId")]
            public string MessengerChatGroupId { get; set; } //;
        }
        
        [Serializable()]
        public class ReservationResponse
        {
            
            [JsonProperty("meeting")]
            public Components.MeetingEntity Meeting { get; set; } //;
            
            [JsonProperty("messengerChatGroupId")]
            public string MessengerChatGroupId { get; set; } //;
        }
        
        [Serializable()]
        public class ReservationResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.ReservationResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class ResponseMemberEntity
        {
            
            [JsonProperty("rowNum")]
            public int RowNum { get; set; } //;
            
            [JsonProperty("accountId")]
            public long AccountId { get; set; } //;
            
            [JsonProperty("identifyKey")]
            public string IdentifyKey { get; set; } //;
            
            [JsonProperty("groupId")]
            public long GroupId { get; set; } //;
            
            [JsonProperty("teamId")]
            public long TeamId { get; set; } //;
            
            [JsonProperty("memberName")]
            public string MemberName { get; set; } //;
            
            [JsonProperty("levelName")]
            public string LevelName { get; set; } //;
            
            [JsonProperty("positionName")]
            public string PositionName { get; set; } //;
            
            [JsonProperty("mailAddress")]
            public string MailAddress { get; set; } //;
            
            [JsonProperty("telNo")]
            public string TelNo { get; set; } //;
            
            [JsonProperty("photoPath")]
            public string PhotoPath { get; set; } //;
            
            [JsonProperty("task")]
            public string Task { get; set; } //;
            
            [JsonProperty("authorityCode")]
            public int AuthorityCode { get; set; } //;
            
            [JsonProperty("createDateTime")]
            public System.DateTime CreateDateTime { get; set; } //;
            
            [JsonProperty("teamName")]
            public string TeamName { get; set; } //;
            
            [JsonProperty("imageUrl")]
            public string ImageUrl { get; set; } //;
        }
        
        [Serializable()]
        public class RestSpace
        {
            
            [JsonProperty("spaceId")]
            public string SpaceId { get; set; } //;
        }
        
        [Serializable()]
        public class RoomJoinRequest
        {
            
            [JsonProperty("deviceType")]
            public Components.DeviceType DeviceType { get; set; } //;
            
            [JsonProperty("meetingId")]
            public long MeetingId { get; set; } //;
            
            [JsonProperty("guestMemberName")]
            public string GuestMemberName { get; set; } //;
            
            [JsonProperty("currentServiceId")]
            public long CurrentServiceId { get; set; } //;
            
            [JsonProperty("currentFieldId")]
            public long CurrentFieldId { get; set; } //;
        }
        
        [Serializable()]
        public class RoomJoinResponse
        {
            
            [JsonProperty("meetingId")]
            public long MeetingId { get; set; } //;
            
            [JsonProperty("roomId")]
            public string RoomId { get; set; } //;
            
            [JsonProperty("groupId")]
            public string GroupId { get; set; } //;
            
            [JsonProperty("mediaId")]
            public string MediaId { get; set; } //;
            
            [JsonProperty("mediaUrl")]
            public string MediaUrl { get; set; } //;
            
            [JsonProperty("channelType")]
            public Components.ChannelType ChannelType { get; set; } //;
            
            [JsonProperty("direction")]
            public Components.Direction Direction { get; set; } //;
        }
        
        [Serializable()]
        public class RoomJoinResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.RoomJoinResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class RoomLeaveRequest
        {
            
            [JsonProperty("meetingId")]
            public long MeetingId { get; set; } //;
            
            [JsonProperty("roomId")]
            public string RoomId { get; set; } //;
            
            [JsonProperty("deviceType")]
            public Components.DeviceType DeviceType { get; set; } //;
        }
        
        [Serializable()]
        public class RoomLeaveResponse
        {
            
            [JsonProperty("meetingId")]
            public long MeetingId { get; set; } //;
            
            [JsonProperty("roomId")]
            public string RoomId { get; set; } //;
        }
        
        [Serializable()]
        public class RoomLeaveResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.RoomLeaveResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class SearchByDetailRequest
        {
            
            [JsonProperty("accountId")]
            public long AccountId { get; set; } //;
            
            [JsonProperty("startDateTime")]
            public System.DateTime StartDateTime { get; set; } //;
            
            [JsonProperty("endDateTime")]
            public System.DateTime EndDateTime { get; set; } //;
            
            [JsonProperty("meetingName")]
            public string MeetingName { get; set; } //;
            
            [JsonProperty("organizerAccountId")]
            public long OrganizerAccountId { get; set; } //;
            
            [JsonProperty("participantAccountId")]
            public long ParticipantAccountId { get; set; } //;
            
            [JsonProperty("upcomingOrOngoing")]
            public bool UpcomingOrOngoing { get; set; } //;
        }
        
        [Serializable()]
        public class SearchByMeetingCodeRequest
        {
            
            [JsonProperty("meetingCode")]
            public string MeetingCode { get; set; } //;
        }
        
        [Serializable()]
        public class SendMailRequest
        {
            
            [JsonProperty("emailEntry")]
            public Components.EmailEntry EmailEntry { get; set; } //;
            
            [JsonProperty("templateName")]
            public string TemplateName { get; set; } //;
        }
        
        [Serializable()]
        public class SetGroupConfigurationRequest
        {
            
            [JsonProperty("groupId")]
            public long GroupId { get; set; } //;
            
            [JsonProperty("configurationCode")]
            public int ConfigurationCode { get; set; } //;
            
            [JsonProperty("configurationValue")]
            public string ConfigurationValue { get; set; } //;
        }
        
        [Serializable()]
        public class SharingPolicy
        {
            
            [JsonProperty("access")]
            public string Access { get; set; } //;
            
            [JsonProperty("inviteToAccountAndBoardLinkAccess")]
            public string InviteToAccountAndBoardLinkAccess { get; set; } //;
            
            [JsonProperty("organizationAccess")]
            public string OrganizationAccess { get; set; } //;
            
            [JsonProperty("teamAccess")]
            public string TeamAccess { get; set; } //;
        }
        
        [Serializable()]
        public class SpaceActivatedSpaceEntity
        {
            
            [JsonProperty("teamId")]
            public long TeamId { get; set; } //;
            
            [JsonProperty("teamName")]
            public string TeamName { get; set; } //;
            
            [JsonProperty("spaceId")]
            public string SpaceId { get; set; } //;
            
            [JsonProperty("totalCount")]
            public int TotalCount { get; set; } //;
        }
        
        [Serializable()]
        public class SpaceActivatedSpaceEntityIEnumerableResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.SpaceActivatedSpaceEntity[] Data { get; set; } //;
        }
        
        [Serializable()]
        public class SpeechToTextRecordInfoRequest
        {
            
            [JsonProperty("meetingId")]
            public long MeetingId { get; set; } //;
        }
        
        [Serializable()]
        public class SpeechToTextRecordInfoResponse
        {
            
            [JsonProperty("soundFiles")]
            public string[] SoundFiles { get; set; } //;
            
            [JsonProperty("fileInfos")]
            public object[] FileInfos { get; set; } //;
        }
        
        [Serializable()]
        public class SpeechToTextRecordInfoResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.SpeechToTextRecordInfoResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class SpeechToTextRecordRequest
        {
            
            [JsonProperty("meetingId")]
            public long MeetingId { get; set; } //;
        }
        
        [Serializable()]
        public class SpeechToTextRecordResponse
        {
            
            [JsonProperty("activeDurationSecs")]
            public int ActiveDurationSecs { get; set; } //;
        }
        
        [Serializable()]
        public class SpeechToTextRecordResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.SpeechToTextRecordResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class SpeechToTextRecordStopResponse
        {
        }
        
        [Serializable()]
        public class SpeechToTextRecordStopResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.SpeechToTextRecordStopResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class SpeechToTextTranscriptionStartRequest
        {
            
            [JsonProperty("meetingId")]
            public long MeetingId { get; set; } //;
            
            [JsonProperty("languageType")]
            public int LanguageType { get; set; } //;
        }
        
        [Serializable()]
        public class StringListResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public string[] Data { get; set; } //;
        }
        
        [Serializable()]
        public class StringResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public string Data { get; set; } //;
        }
        
        [Serializable()]
        public class SttFileDownloadInfo
        {
            
            [JsonProperty("fileName")]
            public string FileName { get; set; } //;
            
            [JsonProperty("fileDownloadUrl")]
            public string FileDownloadUrl { get; set; } //;
        }
        
        [Serializable()]
        public class SttTranscriptionFileInfo
        {
            
            [JsonProperty("requestFileName")]
            public string RequestFileName { get; set; } //;
            
            [JsonProperty("resultFileName")]
            public string ResultFileName { get; set; } //;
            
            [JsonProperty("inProgress")]
            public bool InProgress { get; set; } //;
        }
        
        [Serializable()]
        public class Team
        {
            
            [JsonProperty("teamId")]
            public long TeamId { get; set; } //;
            
            [JsonProperty("parentTeamId")]
            public long ParentTeamId { get; set; } //;
            
            [JsonProperty("teamName")]
            public string TeamName { get; set; } //;
            
            [JsonProperty("spaceId")]
            public string SpaceId { get; set; } //;
            
            [JsonProperty("totalCount")]
            public int TotalCount { get; set; } //;
            
            [JsonProperty("members")]
            public Components.Member[] Members { get; set; } //;
            
            [JsonProperty("subTeams")]
            public Components.Team[] SubTeams { get; set; } //;
        }
        
        [Serializable()]
        public class TeamInfo
        {
            
            [JsonProperty("id")]
            public string Id { get; set; } //;
            
            [JsonProperty("type")]
            public string Type { get; set; } //;
            
            [JsonProperty("name")]
            public string Name { get; set; } //;
        }
        
        [Serializable()]
        public class TeamListResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.Team[] Data { get; set; } //;
        }
        
        [Serializable()]
        public class TeamSummaryInfoResponse
        {
            
            [JsonProperty("teamId")]
            public long TeamId { get; set; } //;
            
            [JsonProperty("teamName")]
            public string TeamName { get; set; } //;
            
            [JsonProperty("totalCount")]
            public int TotalCount { get; set; } //;
            
            [JsonProperty("parentTeamId")]
            public long ParentTeamId { get; set; } //;
            
            [JsonProperty("spaceId")]
            public string SpaceId { get; set; } //;
            
            [JsonProperty("useYn")]
            public string UseYn { get; set; } //;
        }
        
        [Serializable()]
        public class TeamSummaryInfoResponseIEnumerableResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.TeamSummaryInfoResponse[] Data { get; set; } //;
        }
        
        [Serializable()]
        public class TeamTotalMemberCountSelectRequest
        {
            
            [JsonProperty("groupId")]
            public long GroupId { get; set; } //;
        }
        
        [Serializable()]
        public class TeamTotalMemberCountSelectResponse
        {
            
            [JsonProperty("signMemberCount")]
            public int SignMemberCount { get; set; } //;
            
            [JsonProperty("unsignMemberCount")]
            public int UnsignMemberCount { get; set; } //;
        }
        
        [Serializable()]
        public class TeamTotalMemberCountSelectResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.TeamTotalMemberCountSelectResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class TodayBoardEntity
        {
            
            [JsonProperty("BoardSeq")]
            public long BoardSeq { get; set; } //;
            
            [JsonProperty("ObjectId")]
            public string ObjectId { get; set; } //;
            
            [JsonProperty("EmployeeNo")]
            public string EmployeeNo { get; set; } //;
            
            [JsonProperty("EmployeeName")]
            public string EmployeeName { get; set; } //;
            
            [JsonProperty("Message")]
            public string Message { get; set; } //;
            
            [JsonProperty("CreateDatetime")]
            public System.DateTime CreateDatetime { get; set; } //;
            
            [JsonProperty("HhmmText")]
            public string HhmmText { get; set; } //;
            
            [JsonProperty("LatestTimeText")]
            public string LatestTimeText { get; set; } //;
            
            [JsonProperty("IsOwner")]
            public bool IsOwner { get; set; } //;
            
            [JsonProperty("IsRecmmd")]
            public bool IsRecmmd { get; set; } //;
            
            [JsonProperty("RecmmdCnt")]
            public int RecmmdCnt { get; set; } //;
        }
        
        [Serializable()]
        public class TodayBoardEntityIEnumerableResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.TodayBoardEntity[] Data { get; set; } //;
        }
        
        [Serializable()]
        public class UpdateMemberRequest
        {
            
            [JsonProperty("groupId")]
            public long GroupId { get; set; } //;
            
            [JsonProperty("identifyKey")]
            public string IdentifyKey { get; set; } //;
            
            [JsonProperty("memberName")]
            public string MemberName { get; set; } //;
            
            [JsonProperty("teamId")]
            public long TeamId { get; set; } //;
            
            [JsonProperty("levelName")]
            public string LevelName { get; set; } //;
            
            [JsonProperty("positionName")]
            public string PositionName { get; set; } //;
            
            [JsonProperty("telNo")]
            public string TelNo { get; set; } //;
            
            [JsonProperty("mailAddress")]
            public string MailAddress { get; set; } //;
            
            [JsonProperty("photoPath")]
            public string PhotoPath { get; set; } //;
            
            [JsonProperty("task")]
            public string Task { get; set; } //;
        }
        
        [Serializable()]
        public class UpdateMemberTeamRequest
        {
            
            [JsonProperty("groupId")]
            public long GroupId { get; set; } //;
            
            [JsonProperty("identifykeys")]
            public string[] Identifykeys { get; set; } //;
            
            [JsonProperty("teamId")]
            public long TeamId { get; set; } //;
        }
        
        [Serializable()]
        public class UpdateTeamNameRequest
        {
            
            [JsonProperty("groupId")]
            public long GroupId { get; set; } //;
            
            [JsonProperty("teamId")]
            public long TeamId { get; set; } //;
            
            [JsonProperty("changeTargetTeamName")]
            public string ChangeTargetTeamName { get; set; } //;
        }
        
        [Serializable()]
        public class UpdateTeamRequest
        {
            
            [JsonProperty("groupId")]
            public long GroupId { get; set; } //;
            
            [JsonProperty("teamId")]
            public long TeamId { get; set; } //;
            
            [JsonProperty("parentTeamId")]
            public long ParentTeamId { get; set; } //;
        }
        
        [Serializable()]
        public class UploadFileRequest
        {
            
            [JsonProperty("groupId")]
            public long GroupId { get; set; } //;
            
            [JsonProperty("path")]
            public string Path { get; set; } //;
            
            [JsonProperty("fileName")]
            public string FileName { get; set; } //;
            
            [JsonProperty("md5")]
            public string Md5 { get; set; } //;
            
            [JsonProperty("size")]
            public long Size { get; set; } //;
            
            [JsonProperty("directoryPathType")]
            public Components.DirectoryPathUserType DirectoryPathType { get; set; } //;
        }
        
        [Serializable()]
        public class UploadFileResponse
        {
            
            [JsonProperty("url")]
            public string Url { get; set; } //;
            
            [JsonProperty("path")]
            public string Path { get; set; } //;
            
            [JsonProperty("file")]
            public string File { get; set; } //;
            
            [JsonProperty("size")]
            public long Size { get; set; } //;
            
            [JsonProperty("callbackKey")]
            public string CallbackKey { get; set; } //;
        }
        
        [Serializable()]
        public class UploadFileResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.UploadFileResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class UploadedFileListResponseToClient
        {
            
            [JsonProperty("fileList")]
            public Components.FileToClient[] FileList { get; set; } //;
        }
        
        [Serializable()]
        public class UploadedFileListResponseToClientResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.UploadedFileListResponseToClient Data { get; set; } //;
        }
        
        [Serializable()]
        public class UserInfo
        {
            
            [JsonProperty("id")]
            public string Id { get; set; } //;
            
            [JsonProperty("type")]
            public string Type { get; set; } //;
            
            [JsonProperty("name")]
            public string Name { get; set; } //;
        }
        
        [Serializable()]
        public class VoiceBoardEntity
        {
            
            [JsonProperty("boardSeq")]
            public long BoardSeq { get; set; } //;
            
            [JsonProperty("objectId")]
            public string ObjectId { get; set; } //;
            
            [JsonProperty("filePath")]
            public string FilePath { get; set; } //;
            
            [JsonProperty("createDateTime")]
            public System.DateTime CreateDateTime { get; set; } //;
            
            [JsonProperty("accountId")]
            public long AccountId { get; set; } //;
            
            [JsonProperty("recommendCount")]
            public int RecommendCount { get; set; } //;
            
            [JsonProperty("recommendAvailable")]
            public string RecommendAvailable { get; set; } //;
        }
        
        [Serializable()]
        public class VoiceBoardEntityIEnumerableResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.VoiceBoardEntity[] Data { get; set; } //;
        }
        
        [Serializable()]
        public class WaitListAcceptRequest
        {
            
            [JsonProperty("meetingId")]
            public long MeetingId { get; set; } //;
            
            [JsonProperty("waitAccountId")]
            public long WaitAccountId { get; set; } //;
        }
        
        [Serializable()]
        public class WarpBuildingRepresentSpaceRequest
        {
            
            [JsonProperty("buildingId")]
            public long BuildingId { get; set; } //;
        }
        
        [Serializable()]
        public class WarpBuildingRepresentSpaceResponse
        {
            
            [JsonProperty("spaceId")]
            public string SpaceId { get; set; } //;
            
            [JsonProperty("chatGroupId")]
            public string ChatGroupId { get; set; } //;
        }
        
        [Serializable()]
        public class WarpBuildingRepresentSpaceResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.WarpBuildingRepresentSpaceResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class WarpGroupMyTeamSpaceRequest
        {
            
            [JsonProperty("currentServiceId")]
            public long CurrentServiceId { get; set; } //;
        }
        
        [Serializable()]
        public class WarpGroupMyTeamSpaceResponse
        {
            
            [JsonProperty("groupId")]
            public long GroupId { get; set; } //;
            
            [JsonProperty("groupName")]
            public string GroupName { get; set; } //;
            
            [JsonProperty("teamId")]
            public long TeamId { get; set; } //;
            
            [JsonProperty("teamName")]
            public string TeamName { get; set; } //;
            
            [JsonProperty("chatGroupId")]
            public string ChatGroupId { get; set; } //;
        }
        
        [Serializable()]
        public class WarpGroupMyTeamSpaceResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.WarpGroupMyTeamSpaceResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class WarpGroupRestSpaceRequest
        {
            
            [JsonProperty("groupId")]
            public long GroupId { get; set; } //;
            
            [JsonProperty("restSpaceId")]
            public string RestSpaceId { get; set; } //;
        }
        
        [Serializable()]
        public class WarpGroupRestSpaceResponse
        {
            
            [JsonProperty("spaceId")]
            public string SpaceId { get; set; } //;
            
            [JsonProperty("chatGroupId")]
            public string ChatGroupId { get; set; } //;
        }
        
        [Serializable()]
        public class WarpGroupRestSpaceResponseResponseFormat
        {
            
            [JsonProperty("code")]
            public Components.OfficeHttpResultCode Code { get; set; } //;
            
            [JsonProperty("msg")]
            public string Msg { get; set; } //;
            
            [JsonProperty("data")]
            public Components.WarpGroupRestSpaceResponse Data { get; set; } //;
        }
        
        [Serializable()]
        public class WithdrawalRequest
        {
            
            [JsonProperty("groupId")]
            public long GroupId { get; set; } //;
            
            [JsonProperty("identifyKey")]
            public string IdentifyKey { get; set; } //;
        }
        
        [Serializable()]
        public class WithdrawalServiceRequest
        {
            
            [JsonProperty("groupId")]
            public long GroupId { get; set; } //;
        }
        
        [Serializable()]
        public class WorkPayload
        {
            
            [JsonProperty("department")]
            public Components.DepartmentInfo Department { get; set; } //;
            
            [JsonProperty("level")]
            public Components.EmployeeLevel Level { get; set; } //;
            
            [JsonProperty("position")]
            public Components.EmployeePosition Position { get; set; } //;
            
            [JsonProperty("isPrimary")]
            public bool IsPrimary { get; set; } //;
        }
    }
}
